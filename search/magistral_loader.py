"""
–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ —ñ–Ω–¥–µ–∫—Å—É–≤–∞–Ω–Ω—è magistral.csv
"""
import csv
import pickle
import os
from typing import List, Dict
from models.magistral_record import MagistralRecord
from search.normalizer import TextNormalizer
import config


class MagistralLoader:
    """–ö–ª–∞—Å –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è magistral.csv"""
    
    def __init__(self):
        self.normalizer = TextNormalizer()
        self.records: List[MagistralRecord] = []
        self.index_by_city_prefix: Dict[str, List[int]] = {}
        self.index_by_region: Dict[str, List[int]] = {}
    
    def load(self, force_reload: bool = False) -> List[MagistralRecord]:
        """
        –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î magistral.csv
        
        Args:
            force_reload: –ü—Ä–∏–º—É—Å–æ–≤–æ –ø–µ—Ä–µ—á–∏—Ç–∞—Ç–∏ CSV (—ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –∫–µ—à)
            
        Returns:
            –°–ø–∏—Å–æ–∫ MagistralRecord
        """
        # –®–ª—è—Ö –¥–æ –∫–µ—à—É –ë–ï–ó –∫–æ–º–ø—Ä–µ—Å—ñ—ó (—à–≤–∏–¥—à–µ!)
        cache_path = config.MAGISTRAL_CACHE_PATH
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à (—è–∫—â–æ –ù–ï –ø—Ä–∏–º—É—Å–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è)
        if not force_reload and os.path.exists(cache_path):
            try:
                print(f"üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –∫–µ—à—É: {cache_path}")
                return self._load_from_cache()
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–µ—à—É: {e}")
                print("üìÑ –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ CSV...")
        
        # ‚¨áÔ∏è –Ø–ö–©–û –∫–µ—à—É –Ω–µ–º–∞—î –ê–ë–û force_reload - –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑ CSV
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π –∫–µ—à —è–∫—â–æ —î
        if os.path.exists(config.MAGISTRAL_CACHE_PATH):
            try:
                os.remove(config.MAGISTRAL_CACHE_PATH)
                print("‚úì –°—Ç–∞—Ä–∏–π –∫–µ—à –≤–∏–¥–∞–ª–µ–Ω–æ")
            except:
                pass
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑ CSV
        print("üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è magistral.csv...")
        self._load_from_csv()
        
        # –ë—É–¥—É—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏
        print("üî® –ü–æ–±—É–¥–æ–≤–∞ —ñ–Ω–¥–µ–∫—Å—ñ–≤...")
        self._build_indexes()
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
        print("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –∫–µ—à...")
        self._save_to_cache()
        
        print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(self.records)} –∑–∞–ø–∏—Å—ñ–≤")
        return self.records

    
    def _load_from_csv(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –∑ CSV"""
        self.records = []
        
        # –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –∫–æ–¥—É–≤–∞–Ω–Ω—è
        encodings = ['utf-8', 'cp1251', 'windows-1251', 'iso-8859-1', 'latin1']
        
        csv_data = None
        used_encoding = None
        
        for encoding in encodings:
            try:
                with open(config.MAGISTRAL_CSV_PATH, 'r', encoding=encoding) as f:
                    # –ü—Ä–æ–±—É—î–º–æ –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫
                    f.readline()
                    f.seek(0)
                    
                    # –Ø–∫—â–æ —É—Å–ø—ñ—à–Ω–æ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ü–µ –∫–æ–¥—É–≤–∞–Ω–Ω—è
                    reader = csv.DictReader(f, delimiter=';')
                    csv_data = list(reader)
                    used_encoding = encoding
                    break
            except (UnicodeDecodeError, UnicodeError):
                continue
        
        if csv_data is None:
            raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ–¥—É–≤–∞–Ω–Ω—è CSV —Ñ–∞–π–ª—É")
        
        print(f"‚úì –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∫–æ–¥—É–≤–∞–Ω–Ω—è: {used_encoding}")
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –¥–∞–Ω—ñ
        for row in csv_data:
            record = MagistralRecord(
                region=row.get('–û–±–ª–∞—Å—Ç—å', '').strip(),
                old_district=row.get(' –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏–π —Ä–∞–π–æ–Ω(—Å—Ç–∞—Ä–∏–π)', '').strip(),
                new_district=row.get(' –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏–π —Ä–∞–π–æ–Ω(–Ω–æ–≤–∏–π)', '').strip(),
                otg=row.get(' –ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è –û–¢–ì(–¥–æ–≤—ñ–¥–∫–æ–≤–æ)', '').strip(),
                city=row.get(' –ù–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç', '').strip(),
                city_index=row.get(' –Ü–Ω–¥–µ–∫—Å –ù–ü', '').strip(),
                street=row.get(' –ù–∞–∑–≤–∞ –≤—É–ª–∏—Ü—ñ', '').strip(),
                buildings=row.get('‚Ññ –±—É–¥–∏–Ω–∫—É', '').strip(),
                sort_center_1=row.get('  —Å–æ—Ä—Ç—É–≤–∞–ª—å–Ω–∏–π —Ü–µ–Ω—Ç—Ä 1 —Ä—ñ–≤–Ω—è', '').strip(),
                sort_center_2=row.get(' —Å–æ—Ä—Ç—É–≤–∞–ª—å–Ω–∏–π —Ü–µ–Ω—Ç—Ä 2 —Ä—ñ–≤–Ω—è', '').strip(),
                delivery_district=row.get(' –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏–π —Ä–∞–π–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏(–≤—Ä—É—á–µ–Ω–Ω—è)', '').strip(),
                tech_index=row.get(' –¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—á–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –û–ü–ó –¥–æ—Å—Ç–∞–≤–∫–∏(–≤—Ä—É—á–µ–Ω–Ω—è)', '').strip(),
                features=row.get('–û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è –í–ü–ó', '').strip(),
                not_working=row.get('–¢–∏–º—á–∞—Å–æ–≤–æ –Ω–µ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É—î', '').strip()
            )
            
            # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –¥–ª—è –ø–æ—à—É–∫—É
            record.normalized_city = self.normalizer.normalize_city(record.city)
            record.normalized_street = self.normalizer.normalize_street(record.street)
            record.normalized_region = self.normalizer.normalize_region(record.region)
            
            self.records.append(record)
    
    def _build_indexes(self):
        """–ë—É–¥—É—î —ñ–Ω–¥–µ–∫—Å–∏ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É"""
        self.index_by_city_prefix = {}
        self.index_by_region = {}
        
        for i, record in enumerate(self.records):
            # –Ü–Ω–¥–µ–∫—Å –ø–æ –ø–µ—Ä—à–∏—Ö 2-3 –ª—ñ—Ç–µ—Ä–∞—Ö –º—ñ—Å—Ç–∞
            if record.normalized_city and len(record.normalized_city) >= 2:
                for prefix_len in [2, 3]:
                    if len(record.normalized_city) >= prefix_len:
                        prefix = record.normalized_city[:prefix_len]
                        if prefix not in self.index_by_city_prefix:
                            self.index_by_city_prefix[prefix] = []
                        self.index_by_city_prefix[prefix].append(i)
            
            # –Ü–Ω–¥–µ–∫—Å –ø–æ –æ–±–ª–∞—Å—Ç—ñ
            if record.normalized_region:
                if record.normalized_region not in self.index_by_region:
                    self.index_by_region[record.normalized_region] = []
                self.index_by_region[record.normalized_region].append(i)
        
        print(f"‚úì –Ü–Ω–¥–µ–∫—Å –º—ñ—Å—Ç: {len(self.index_by_city_prefix)} –ø—Ä–µ—Ñ—ñ–∫—Å—ñ–≤")
        print(f"‚úì –Ü–Ω–¥–µ–∫—Å –æ–±–ª–∞—Å—Ç–µ–π: {len(self.index_by_region)} –æ–±–ª–∞—Å—Ç–µ–π")
    
    def _save_to_cache(self):
        """–ó–±–µ—Ä—ñ–≥–∞—î –≤ pickle –∫–µ—à –ë–ï–ó –∫–æ–º–ø—Ä–µ—Å—ñ—ó (—à–≤–∏–¥—à–µ!)"""
        cache_path = config.MAGISTRAL_CACHE_PATH
        
        cache_data = {
            'records': self.records,
            'index_by_city_prefix': self.index_by_city_prefix,
            'index_by_region': self.index_by_region
        }
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ë–ï–ó –∫–æ–º–ø—Ä–µ—Å—ñ—ó - —É 4-6 —Ä–∞–∑—ñ–≤ —à–≤–∏–¥—à–µ!
        with open(cache_path, 'wb') as f:
            pickle.dump(cache_data, f, protocol=pickle.HIGHEST_PROTOCOL)
    
    def _load_from_cache(self) -> List[MagistralRecord]:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑ pickle –∫–µ—à—É –ë–ï–ó –∫–æ–º–ø—Ä–µ—Å—ñ—ó (—à–≤–∏–¥—à–µ!)"""
        cache_path = config.MAGISTRAL_CACHE_PATH
        
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ë–ï–ó –∫–æ–º–ø—Ä–µ—Å—ñ—ó - —É 4-6 —Ä–∞–∑—ñ–≤ —à–≤–∏–¥—à–µ!
            with open(cache_path, 'rb') as f:
                cache_data = pickle.load(f)
            
            self.records = cache_data['records']
            self.index_by_city_prefix = cache_data['index_by_city_prefix']
            self.index_by_region = cache_data['index_by_region']
            
            print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ –∫–µ—à—É: {len(self.records)} –∑–∞–ø–∏—Å—ñ–≤")
            return self.records
        
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–µ—à—É: {e}")
            # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π –∫–µ—à
            try:
                os.remove(cache_path)
            except:
                pass
            # –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑ CSV
            return self.load(force_reload=True)
    
    def get_candidates_by_city_prefix(self, city: str) -> List[MagistralRecord]:
        """–®–≤–∏–¥–∫–∏–π –ø–æ—à—É–∫ –ø–æ –ø—Ä–µ—Ñ—ñ–∫—Å—É –º—ñ—Å—Ç–∞"""
        if not city or len(city) < 2:
            return []
        
        city_norm = self.normalizer.normalize_city(city)
        prefix = city_norm[:2]
        
        if prefix not in self.index_by_city_prefix:
            return []
        
        indices = self.index_by_city_prefix[prefix]
        return [self.records[i] for i in indices]
    
    def get_candidates_by_region(self, region: str) -> List[MagistralRecord]:
        """–®–≤–∏–¥–∫–∏–π –ø–æ—à—É–∫ –ø–æ –æ–±–ª–∞—Å—Ç—ñ"""
        if not region:
            return []
        
        region_norm = self.normalizer.normalize_region(region)
        
        if region_norm not in self.index_by_region:
            return []
        
        indices = self.index_by_region[region_norm]
        return [self.records[i] for i in indices]

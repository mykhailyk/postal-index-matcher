"""
–Ü–Ω–¥–µ–∫—Å –£–∫—Ä–ø–æ—à—Ç–∏ - —à–≤–∏–¥–∫–∏–π –ø–æ—à—É–∫ –º—ñ—Å—Ç/–≤—É–ª–∏—Ü—å/—ñ–Ω–¥–µ–∫—Å—ñ–≤
"""
import os
import pickle
from collections import defaultdict
import config


class UkrposhtaIndex:
    """–Ü–Ω–¥–µ–∫—Å –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É –ø–æ –±–∞–∑—ñ –£–∫—Ä–ø–æ—à—Ç–∏"""
    
    def __init__(self):
        self.city_by_prefix = {}
        self.city_data = {}
        self.magistral_cache = []
        self.cache_file = os.path.join('cache', 'ukrposhta_v2.pkl')
    
    def build(self, magistral_records):
        """–ë—É–¥—É—î —ñ–Ω–¥–µ–∫—Å –∑ magistral.csv"""
        print("üî® –ü–æ–±—É–¥–æ–≤–∞ —ñ–Ω–¥–µ–∫—Å—É –£–∫—Ä–ø–æ—à—Ç–∏ v2...")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–µ—à –¥–ª—è get_buildings
        self.magistral_cache = magistral_records
        
        cities_data = defaultdict(lambda: {'streets': set(), 'display': None})
        
        for record in magistral_records:
            city_raw = getattr(record, 'city', None)
            
            if not city_raw:
                continue
            
            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω—É –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞
            district = getattr(record, 'new_district', None) or getattr(record, 'old_district', None)
            region = getattr(record, 'region', None)
            
            # –í–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            if district and region:
                city_display = f"{city_raw}, {district}, {region}"
            elif region:
                city_display = f"{city_raw}, {region}"
            else:
                city_display = city_raw
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ
            if cities_data[city_display]['display'] is None:
                cities_data[city_display]['display'] = city_display
            
            # –î–æ–¥–∞—î–º–æ –≤—É–ª–∏—Ü—é
            street = getattr(record, 'street', None)
            if street:
                cities_data[city_display]['streets'].add(street)
        
        # –ë—É–¥—É—î–º–æ —ñ–Ω–¥–µ–∫—Å –ø–æ –ø—Ä–µ—Ñ—ñ–∫—Å–∞–º
        print(f"üìä –í—Å—å–æ–≥–æ –º—ñ—Å—Ç: {len(cities_data)}")
        
        for city_full, data in cities_data.items():
            # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–µ —Å–ª–æ–≤–æ (–±–µ–∑ –ø—Ä–µ—Ñ—ñ–∫—Å—ñ–≤ –º., —Å., —Å–º—Ç.)
            city_name = city_full.split(',')[0].strip()
            
            # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–ª—é—á—ñ–≤
            city_name_clean = city_name
            for prefix in ['–º. ', '—Å–º—Ç. ', '—Å. ', '—Å-—â–µ ']:
                if city_name_clean.startswith(prefix):
                    city_name_clean = city_name_clean[len(prefix):]
                    break
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å–∏ –¥–ª—è –û–ë–û–• –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤
            for name_variant in [city_name_clean, city_name]:
                if len(name_variant) >= 3:
                    for i in range(3, min(len(name_variant) + 1, 8)):
                        prefix = name_variant[:i].lower()
                        
                        if prefix not in self.city_by_prefix:
                            self.city_by_prefix[prefix] = []
                        
                        if city_full not in self.city_by_prefix[prefix]:
                            self.city_by_prefix[prefix].append(city_full)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –º—ñ—Å—Ç–∞
            self.city_data[city_full] = {
                'streets': list(data['streets']),
                'display': data['display']
            }
        
        print(f"‚úÖ –Ü–Ω–¥–µ–∫—Å –ø–æ–±—É–¥–æ–≤–∞–Ω–æ. –ü—Ä–µ—Ñ—ñ–∫—Å—ñ–≤: {len(self.city_by_prefix)}")
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
        self.save()
    
    def save(self):
        """–ó–±–µ—Ä—ñ–≥–∞—î —ñ–Ω–¥–µ–∫—Å —É —Ñ–∞–π–ª + magistral_cache"""
        os.makedirs(os.path.dirname(self.cache_file), exist_ok=True)
        
        data = {
            'city_by_prefix': self.city_by_prefix,
            'city_data': self.city_data,
            'magistral_cache': self.magistral_cache  # ‚¨ÖÔ∏è –î–û–î–ê–ù–û
        }
        
        with open(self.cache_file, 'wb') as f:
            pickle.dump(data, f)
        
        print(f"üíæ –Ü–Ω–¥–µ–∫—Å –£–∫—Ä–ø–æ—à—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {self.cache_file}")
    
    def load(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —ñ–Ω–¥–µ–∫—Å –∑ —Ñ–∞–π–ª—É + magistral_cache"""
        if not os.path.exists(self.cache_file):
            print("‚ö†Ô∏è –ö–µ—à —ñ–Ω–¥–µ–∫—Å—É –£–∫—Ä–ø–æ—à—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        try:
            with open(self.cache_file, 'rb') as f:
                data = pickle.load(f)
            
            self.city_by_prefix = data['city_by_prefix']
            self.city_data = data['city_data']
            
            # ‚¨áÔ∏è –ö–†–ò–¢–ò–ß–ù–û: –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ magistral_cache
            if 'magistral_cache' in data:
                self.magistral_cache = data['magistral_cache']
                print(f"‚úÖ –Ü–Ω–¥–µ–∫—Å –£–∫—Ä–ø–æ—à—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ –∫–µ—à—É ({len(self.city_data)} –º—ñ—Å—Ç, {len(self.magistral_cache)} –∑–∞–ø–∏—Å—ñ–≤)")
            else:
                print(f"‚ö†Ô∏è –ö–µ—à –±–µ–∑ magistral - –ø–æ—Ç—Ä—ñ–±–µ–Ω rebuild")
                return False
            
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–µ—à—É: {e}")
            return False
    
    def search_cities(self, query):
        """–®—É–∫–∞—î –º—ñ—Å—Ç–∞ - –ú–Ü–°–¢–ê –ü–ï–†–®–ò–ú–ò"""
        if len(query) < 3:
            return []
        
        query_lower = query.lower()
        prefix = query_lower[:3]
        
        candidates = self.city_by_prefix.get(prefix, [])
        
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ
        results = [c for c in candidates if query_lower in c.lower()]
        
        
        # –°–û–†–¢–£–í–ê–ù–ù–Ø: –º. > —Å–º—Ç. > —Å. > —Å-—â–µ
        def city_sort_key(city):
            city_part = city.split(',')[0].strip()
            if city_part.startswith('–º. '):
                return (0, city)
            elif city_part.startswith('—Å–º—Ç. '):
                return (1, city)
            elif city_part.startswith('—Å. '):
                return (2, city)
            elif city_part.startswith('—Å-—â–µ '):
                return (3, city)
            else:
                return (4, city)
        
        results = sorted(results, key=city_sort_key)
        
        return results[:10]
    
    def get_streets(self, city_full):
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≤—É–ª–∏—Ü—å –¥–ª—è –º—ñ—Å—Ç–∞"""
        data = self.city_data.get(city_full, {})
        return data.get('streets', [])
    
    def get_buildings(self, city_full, street):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –º–∞–ø—É –±—É–¥–∏–Ω–∫—ñ–≤ -> —ñ–Ω–¥–µ–∫—Å–∏ –¥–ª—è –≤—É–ª–∏—Ü—ñ"""
        # –ë–µ—Ä–µ–º–æ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –±–µ–∑ —Ä–∞–π–æ–Ω—É/–æ–±–ª–∞—Å—Ç—ñ
        city_name = city_full.split(',')[0].strip()
        
        # –®—É–∫–∞—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ü—å–æ–≥–æ –º—ñ—Å—Ç–∞ —ñ –≤—É–ª–∏—Ü—ñ
        buildings_map = {}
        
        for record in self.magistral_cache:
            record_city = getattr(record, 'city', None)
            record_street = getattr(record, 'street', None)
            
            if not record_city or not record_street:
                continue
            
            # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –º—ñ—Å—Ç–æ (–≤—Ä–∞—Ö–æ–≤—É—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å–∏)
            if city_name.lower() in record_city.lower() or record_city.lower() in city_name.lower():
                # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –≤—É–ª–∏—Ü—é
                if street.lower() in record_street.lower():
                    idx = getattr(record, 'city_index', None)
                    buildings = getattr(record, 'buildings', None)
                    
                    if idx:
                        idx_str = str(idx)
                        if idx_str not in buildings_map:
                            buildings_map[idx_str] = buildings if buildings else ""
        
        return buildings_map

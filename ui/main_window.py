"""
–ì–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–∏ - –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è
"""
import os
import re
import pandas as pd
import traceback
from PyQt5.QtWidgets import (
    QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QSplitter,
    QPushButton, QLabel, QTableWidget, QTableWidgetItem, QFileDialog,
    QMessageBox, QToolBar, QAction, QProgressBar, QHeaderView,
    QAbstractItemView, QFrame, QComboBox, QShortcut, QApplication, QCheckBox, QSpinBox
)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QColor, QKeySequence

from handlers.excel_handler import ExcelHandler
from handlers.column_mapping_handler import ColumnMappingHandler
from search.hybrid_search import HybridSearch
from models.address import Address
from utils.logger import Logger
from utils.undo_manager import UndoManager
from utils.settings_manager import SettingsManager
from ui.widgets.column_mapping_dialog import ColumnMappingDialog
from ui.widgets.address_selector_panel import AddressSelectorPanel
from ui.widgets.results_panel import ResultsPanel
import config


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        self.logger = Logger()
        self.excel_handler = ExcelHandler()
        self.undo_manager = UndoManager()
        self.search_engine = None

        self.current_file = None
        self.current_row = -1
        self.search_results = []

        self.processing_stopped = False
        self.semi_auto_waiting = False
        self.semi_auto_current_row = -1
        self.semi_auto_min_confidence = 80  # ‚¨ÖÔ∏è –ó–ú–Ü–ù–ï–ù–û –∑ 90 –Ω–∞ 80

        self.init_ui()
        self.setup_shortcuts() 
        self.init_search_engine()


    def init_ui(self):
        self.setWindowTitle(config.WINDOW_TITLE)

        geometry = SettingsManager.get_window_geometry()
        if geometry:
            self.setGeometry(geometry['x'], geometry['y'], geometry['width'], geometry['height'])
        else:
            self.setGeometry(100, 50, config.WINDOW_WIDTH, config.WINDOW_HEIGHT)

        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        main_layout = QVBoxLayout()
        main_layout.setSpacing(3)
        main_layout.setContentsMargins(5, 5, 5, 5)
        central_widget.setLayout(main_layout)

        top_panel = self.create_compact_top_panel()
        main_layout.addWidget(top_panel)

        main_splitter = QSplitter(Qt.Horizontal)

        left_panel = self.create_table_panel()
        main_splitter.addWidget(left_panel)

        right_panel = self.create_compact_right_panel()
        main_splitter.addWidget(right_panel)

        main_splitter.setSizes([1100, 600])
        main_layout.addWidget(main_splitter)

        self.create_status_bar()
        main_layout.addWidget(self.status_bar)

        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.progress_bar.setMaximumHeight(15)
        main_layout.addWidget(self.progress_bar)

        # ‚¨áÔ∏è –°–¢–ò–õ–¨ –¢–ê–ë–õ–ò–¶–Ü: –ë–ï–ó –±–ª–∞–∫–∏—Ç–Ω–æ—ó –∑–∞–ª–∏–≤–∫–∏
        self.table.setStyleSheet("""
            QTableWidget {
                gridline-color: #d0d0d0;
                border: 1px solid #c0c0c0;
            }
            QTableWidget::item {
                padding: 4px;
            }
            QTableWidget::item:selected {
                background-color: #E3F2FD;
                border: 2px solid #000000;
            }
            QTableWidget::item:focus {
                background-color: #E3F2FD;
                border: 2px solid #000000;
            }
            QHeaderView::section {
                background-color: #f5f5f5;
                padding: 5px;
                border: 1px solid #d0d0d0;
                font-weight: bold;
            }
        """)



    def create_compact_top_panel(self):
        """–ö–æ–º–ø–∞–∫—Ç–Ω–∞ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è"""
        panel = QFrame()
        panel.setMaximumHeight(60)
        layout = QVBoxLayout()
        layout.setSpacing(3)
        layout.setContentsMargins(5, 5, 5, 5)

        row1 = QHBoxLayout()

        file_label = QLabel("üìÅ")
        file_label.setStyleSheet("font-size: 14px;")
        row1.addWidget(file_label)

        self.file_label = QLabel("–ù–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
        self.file_label.setStyleSheet("padding: 3px; background-color: #f0f0f0; border-radius: 2px; font-size: 11px;")
        row1.addWidget(self.file_label, 1)

        load_btn = QPushButton("–í—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª")
        load_btn.clicked.connect(self.load_excel_file)
        load_btn.setStyleSheet("padding: 4px 10px; font-size: 11px;")
        row1.addWidget(load_btn)

        self.column_mapping_btn = QPushButton("‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å—Ç–æ–≤–ø—Ü—ñ")
        self.column_mapping_btn.setEnabled(False)
        self.column_mapping_btn.clicked.connect(self.configure_columns)
        self.column_mapping_btn.setStyleSheet("padding: 4px 10px; font-size: 11px;")
        row1.addWidget(self.column_mapping_btn)

        self.save_btn = QPushButton("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏")
        self.save_btn.setEnabled(False)
        self.save_btn.clicked.connect(self.save_excel_file)
        self.save_btn.setStyleSheet("background-color: #4CAF50; color: white; padding: 4px 10px; font-weight: bold; font-size: 11px;")
        row1.addWidget(self.save_btn)
        
        self.save_as_btn = QPushButton("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ —è–∫...")
        self.save_as_btn.setEnabled(False)
        self.save_as_btn.clicked.connect(self.save_excel_file_as)
        self.save_as_btn.setStyleSheet("padding: 4px 10px; font-size: 11px;")
        row1.addWidget(self.save_as_btn)
        
        # ‚¨áÔ∏è –î–û–î–ê–¢–ò: –ö–Ω–æ–ø–∫–∏ Undo/Redo
        self.undo_btn = QPushButton("‚è™ –í—ñ–¥–º—ñ–Ω–∏—Ç–∏")
        self.undo_btn.setEnabled(False)
        self.undo_btn.clicked.connect(self.undo_action)
        self.undo_btn.setStyleSheet("padding: 4px 10px; font-size: 11px;")
        self.undo_btn.setToolTip("–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –¥—ñ—é (Ctrl+Z)")
        row1.addWidget(self.undo_btn)

        self.redo_btn = QPushButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ ‚è©")
        self.redo_btn.setEnabled(False)
        self.redo_btn.clicked.connect(self.redo_action)
        self.redo_btn.setStyleSheet("padding: 4px 10px; font-size: 11px;")
        self.redo_btn.setToolTip("–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –¥—ñ—é (Ctrl+Y)")
        row1.addWidget(self.redo_btn)

        
        # ‚¨áÔ∏è –î–û–î–ê–ù–û: –§—ñ–ª—å—Ç—Ä –ø–æ –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–æ—Å—Ç—ñ
        filter_label = QLabel("–§—ñ–ª—å—Ç—Ä:")
        filter_label.setStyleSheet("font-size: 10px; margin-left: 15px;")
        row1.addWidget(filter_label)

        self.filter_combo = QComboBox()
        self.filter_combo.addItems(["–í—Å—ñ", "–ü—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", "–ù–µ–ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"])
        self.filter_combo.currentTextChanged.connect(self.apply_filter_new)
        self.filter_combo.setStyleSheet("font-size: 10px; padding: 2px;")
        row1.addWidget(self.filter_combo)
        
        # –ö–ù–û–ü–ö–ê "–û–ù–û–í–ò–¢–ò –ö–ï–®"
        refresh_cache_btn = QPushButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –∫–µ—à")
        refresh_cache_btn.clicked.connect(self.refresh_cache)
        refresh_cache_btn.setStyleSheet("padding: 4px 10px; font-size: 11px; background-color: #FF9800; color: white;")
        refresh_cache_btn.setToolTip("–û–Ω–æ–≤–∏—Ç–∏ –∫–µ—à magistral.csv —Ç–∞ —ñ–Ω–¥–µ–∫—Å –£–∫—Ä–ø–æ—à—Ç–∏")
        row1.addWidget(refresh_cache_btn)
        
        self.save_old_index_checkbox = QCheckBox("–ó–±–µ—Ä—ñ–≥–∞—Ç–∏ —Å—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å")
        self.save_old_index_checkbox.setChecked(False)
        self.save_old_index_checkbox.setStyleSheet("font-size: 10px;")
        self.save_old_index_checkbox.setToolTip("–Ø–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ - –∫–æ–ª–æ–Ω–∫–∞ '–°—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å' –±—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É —Ñ–∞–π–ª")
        row1.addWidget(self.save_old_index_checkbox)

        row1.addStretch()
        layout.addLayout(row1)

        panel.setLayout(layout)
        return panel

    def create_table_panel(self):
        """–ü–∞–Ω–µ–ª—å –∑ —Ç–∞–±–ª–∏—Ü–µ—é"""
        panel = QWidget()
        layout = QVBoxLayout()
        layout.setSpacing(3)
        layout.setContentsMargins(0, 0, 0, 0)

        header = QHBoxLayout()

        label = QLabel("üìã –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö")
        label.setStyleSheet("font-weight: bold; font-size: 13px;")
        header.addWidget(label)

        # ‚¨áÔ∏è –î–û–î–ê–ù–û: –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        nav_btn_prev = QPushButton("‚óÄ –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π")
        nav_btn_prev.clicked.connect(self.go_to_previous_row)
        nav_btn_prev.setStyleSheet("padding: 5px 10px; font-size: 10px;")
        nav_btn_prev.setToolTip("–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä—è–¥–∫–∞ (‚Üë)")
        header.addWidget(nav_btn_prev)
        
        nav_btn_next = QPushButton("–ù–∞—Å—Ç—É–ø–Ω–∏–π ‚ñ∂")
        nav_btn_next.clicked.connect(self.go_to_next_row)
        nav_btn_next.setStyleSheet("padding: 5px 10px; font-size: 10px;")
        nav_btn_next.setToolTip("–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä—è–¥–∫–∞ (‚Üì)")
        header.addWidget(nav_btn_next)

        # –î–û–î–ê–ù–û: –ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–æ–∑–º—ñ—Ä—É —à—Ä–∏—Ñ—Ç—É —Ç–∞–±–ª–∏—Ü—ñ
        font_label = QLabel("–®—Ä–∏—Ñ—Ç:")
        font_label.setStyleSheet("font-size: 10px; margin-left: 10px;")
        header.addWidget(font_label)
        
        self.table_font_spinbox = QSpinBox()
        self.table_font_spinbox.setMinimum(8)
        self.table_font_spinbox.setMaximum(16)
        self.table_font_spinbox.setValue(10)
        self.table_font_spinbox.setSuffix(" px")
        self.table_font_spinbox.setStyleSheet("font-size: 10px; padding: 2px;")
        self.table_font_spinbox.valueChanged.connect(self.update_table_font_size)
        header.addWidget(self.table_font_spinbox)

        header.addStretch()

        self.search_btn = QPushButton("üîç –ó–Ω–∞–π—Ç–∏ (Enter)")
        self.search_btn.setEnabled(False)
        self.search_btn.clicked.connect(self.search_address)
        self.search_btn.setStyleSheet("background-color: #2196F3; color: white; padding: 6px 15px; font-weight: bold; font-size: 11px;")
        header.addWidget(self.search_btn)

        self.auto_process_btn = QPushButton("‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞")
        self.auto_process_btn.setEnabled(False)
        self.auto_process_btn.clicked.connect(self.start_auto_processing)
        self.auto_process_btn.setStyleSheet("background-color: #FF9800; color: white; padding: 6px 12px; font-size: 11px;")
        header.addWidget(self.auto_process_btn)

        self.semi_auto_btn = QPushButton("üîÑ –ù–∞–ø—ñ–≤-–∞–≤—Ç–æ")
        self.semi_auto_btn.setEnabled(False)
        self.semi_auto_btn.clicked.connect(self.start_semi_auto_processing)
        self.semi_auto_btn.setStyleSheet("background-color: #9C27B0; color: white; padding: 6px 12px; font-size: 11px;")
        header.addWidget(self.semi_auto_btn)

        layout.addLayout(header)

        self.table = QTableWidget()
        self.table.setEditTriggers(QAbstractItemView.DoubleClicked | QAbstractItemView.EditKeyPressed)
        self.table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.table.setSelectionMode(QAbstractItemView.SingleSelection)
        self.table.itemChanged.connect(self.on_cell_edited)
        self.table.itemSelectionChanged.connect(self.on_row_selected)
        layout.addWidget(self.table)

        self.original_data_label = QLabel("–û–±–µ—Ä—ñ—Ç—å —Ä—è–¥–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–∞–Ω–∏—Ö")
        self.original_data_label.setStyleSheet(
            "padding: 5px; background-color: #FFF3E0; border: 1px solid #FFB74D; "
            "border-radius: 3px; font-family: 'Courier New'; font-size: 10px;"
        )
        self.original_data_label.setWordWrap(True)
        self.original_data_label.setMaximumHeight(60)
        layout.addWidget(self.original_data_label)

        panel.setLayout(layout)
        return panel


    def update_table_font_size(self, size):
        """–û–Ω–æ–≤–ª—é—î —Ä–æ–∑–º—ñ—Ä —à—Ä–∏—Ñ—Ç—É —Ç–∞–±–ª–∏—Ü—ñ"""
        self.table.setStyleSheet(f"font-size: {size}px;")


    def create_compact_right_panel(self):
        """–ö–æ–º–ø–∞–∫—Ç–Ω–∞ –ø—Ä–∞–≤–∞ –ø–∞–Ω–µ–ª—å"""
        panel = QSplitter(Qt.Vertical)
        
        # ‚¨áÔ∏è –°–ü–û–ß–ê–¢–ö–£ –°–¢–í–û–†–Æ–Ñ–ú–û results_panel
        self.results_panel = ResultsPanel()
        
        # ‚¨áÔ∏è –ü–û–¢–Ü–ú address_panel
        self.address_panel = AddressSelectorPanel()
        
        # ‚¨áÔ∏è –¢–ï–ü–ï–† –ü–Ü–î–ö–õ–Æ–ß–ê–Ñ–ú–û –°–ò–ì–ù–ê–õ–ò (–ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è)
        self.results_panel.index_selected.connect(self.apply_suggested_index)
        self.address_panel.index_double_clicked.connect(self.apply_suggested_index)
        
        # ‚¨áÔ∏è –î–û–î–ê–Ñ–ú–û –î–û SPLITTER (address –∑–≤–µ—Ä—Ö—É, results –∑–Ω–∏–∑—É)
        self.address_panel.setMaximumHeight(320)
        panel.addWidget(self.address_panel)
        panel.addWidget(self.results_panel)
        
        # ‚¨áÔ∏è –†–û–ó–ú–Ü–†–ò SPLITTER
        sizes = SettingsManager.get_splitter_sizes('right_panel')
        if sizes:
            panel.setSizes(sizes)
        else:
            panel.setSizes([220, 480])
        
        return panel


    def create_status_bar(self):
        self.status_bar = QLabel("–ì–æ—Ç–æ–≤–æ –¥–æ —Ä–æ–±–æ—Ç–∏")
        self.status_bar.setStyleSheet(
            "padding: 5px; background-color: #E8F5E9; "
            "border-top: 1px solid #4CAF50; font-size: 10px;"
        )
        self.status_bar.setMaximumHeight(25)

    def setup_shortcuts(self):
        search_shortcut = QShortcut(QKeySequence(Qt.Key_Return), self)
        search_shortcut.activated.connect(self.search_address)

        star_shortcut = QShortcut(QKeySequence("*"), self)
        star_shortcut.activated.connect(self.set_index_star)

    def init_search_engine(self):
        self.logger.info("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ—à—É–∫–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞...")
        self.status_bar.setText("‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è magistral.csv...")

        try:
            self.search_engine = HybridSearch()
            self.address_panel.set_magistral_cache(self.search_engine.magistral_records)
            self.status_bar.setText("‚úÖ –ü–æ—à—É–∫–æ–≤–∏–π –¥–≤–∏–∂–æ–∫ –≥–æ—Ç–æ–≤–∏–π")
            self.logger.info("–ü–æ—à—É–∫–æ–≤–∏–π –¥–≤–∏–∂–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø–æ—à—É–∫—É: {e}")
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ magistral.csv:\n{e}")


    def load_excel_file(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î Excel —Ñ–∞–π–ª"""
        last_dir = SettingsManager.get_last_directory()
        if not last_dir:
            last_dir = ""
        
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "–í—ñ–¥–∫—Ä–∏—Ç–∏ Excel —Ñ–∞–π–ª",
            last_dir,
            "Excel Files (*.xlsx *.xls)"
        )

        if not file_path:
            return

        try:
            self.logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {file_path}")
            
            SettingsManager.set_last_directory(os.path.dirname(file_path))
            
            self.excel_handler.load_file(file_path)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω—É –∫–æ–ª–æ–Ω–∫—É "–°—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å"
            if '–°—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å' not in self.excel_handler.df.columns:
                index_col = None
                if self.excel_handler.column_mapping:
                    index_col = self.excel_handler.column_mapping.get('index')
                    
                    if isinstance(index_col, list):
                        index_col = index_col[0] if index_col else None
                
                if index_col and index_col in self.excel_handler.df.columns:
                    self.excel_handler.df[index_col] = self.excel_handler.df[index_col].astype(str)
                    
                    index_position = self.excel_handler.df.columns.get_loc(index_col)
                    self.excel_handler.df.insert(index_position + 1, '–°—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å', '')
                else:
                    self.excel_handler.df['–°—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å'] = ''
                
                self.logger.info("–°—Ç–≤–æ—Ä–µ–Ω–æ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω—É –∫–æ–ª–æ–Ω–∫—É '–°—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å'")
            
            self.current_file = file_path
            self.file_label.setText(os.path.basename(file_path))
            
            self.column_mapping_btn.setEnabled(True)
            self.save_btn.setEnabled(True)
            self.save_as_btn.setEnabled(True)
            self.search_btn.setEnabled(True)
            self.auto_process_btn.setEnabled(True)
            self.semi_auto_btn.setEnabled(True)  # ‚¨ÖÔ∏è –î–û–î–ê–ù–û (–±—É–ª–æ –æ–±—Ä—ñ–∑–∞–Ω–æ)
            
            self.load_data_to_table()
            
            if self.excel_handler.column_mapping:
                self.logger.info("–ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—É —Å—Ö–µ–º—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π")
            else:
                reply = QMessageBox.question(
                    self,
                    "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤",
                    "–ë–∞–∂–∞—î—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ–≤ –∑–∞—Ä–∞–∑?",
                    QMessageBox.Yes | QMessageBox.No
                )
                
                if reply == QMessageBox.Yes:
                    self.configure_columns()
            
            self.status_bar.setText(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {os.path.basename(file_path)} ({len(self.excel_handler.df)} —Ä—è–¥–∫—ñ–≤)")
            self.logger.info(f"–§–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ: {len(self.excel_handler.df)} —Ä—è–¥–∫—ñ–≤")
            
        except Exception as e:  # ‚¨ÖÔ∏è –¶–ï–ô –ë–õ–û–ö –ë–†–ê–ö–£–í–ê–í!
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")
            self.logger.error(traceback.format_exc())
            QMessageBox.critical(
                self,
                "–ü–æ–º–∏–ª–∫–∞",
                f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª:\n{e}"
            )



    def save_excel_file(self):
        """–ó–±–µ—Ä—ñ–≥–∞—î Excel —Ñ–∞–π–ª"""
        if not self.current_file:
            self.save_excel_file_as()
            return

        try:
            df_to_save = self.excel_handler.df.copy()
            
            # –í–∏–¥–∞–ª—è—î–º–æ '–°—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å' —è–∫—â–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if not self.save_old_index_checkbox.isChecked():
                if '–°—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å' in df_to_save.columns:
                    df_to_save = df_to_save.drop(columns=['–°—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å'])
                    self.logger.info("–ö–æ–ª–æ–Ω–∫–∞ '–°—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å' –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∞")
            else:
                self.logger.info("–ö–æ–ª–æ–Ω–∫–∞ '–°—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å' –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É —Ñ–∞–π–ª")
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É
            _, ext = os.path.splitext(self.current_file)
            
            # ‚¨áÔ∏è –ü–Ü–î–¢–†–ò–ú–ö–ê XLS –§–û–†–ú–ê–¢–£
            if ext.lower() == '.xls':
                # XLS –ø—ñ–¥—Ç—Ä–∏–º—É—î –º–∞–∫—Å–∏–º—É–º 65536 —Ä—è–¥–∫—ñ–≤ —ñ 256 –∫–æ–ª–æ–Ω–æ–∫
                if len(df_to_save) > 65536:
                    QMessageBox.warning(
                        self, 
                        "–£–≤–∞–≥–∞", 
                        "XLS —Ñ–æ—Ä–º–∞—Ç –ø—ñ–¥—Ç—Ä–∏–º—É—î –º–∞–∫—Å–∏–º—É–º 65536 —Ä—è–¥–∫—ñ–≤!\n"
                        "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ XLSX —Ñ–æ—Ä–º–∞—Ç –∞–±–æ –∑–º–µ–Ω—à—Ç–µ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤."
                    )
                    return
                
                if len(df_to_save.columns) > 256:
                    QMessageBox.warning(
                        self, 
                        "–£–≤–∞–≥–∞", 
                        "XLS —Ñ–æ—Ä–º–∞—Ç –ø—ñ–¥—Ç—Ä–∏–º—É—î –º–∞–∫—Å–∏–º—É–º 256 –∫–æ–ª–æ–Ω–æ–∫!\n"
                        "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ XLSX —Ñ–æ—Ä–º–∞—Ç –∞–±–æ –∑–º–µ–Ω—à—Ç–µ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫."
                    )
                    return
                
                try:
                    import xlwt
                    df_to_save.to_excel(self.current_file, index=False, engine='xlwt')
                    self.logger.info(f"–§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ XLS: {self.current_file}")
                except ImportError:
                    QMessageBox.critical(
                        self, 
                        "–ü–æ–º–∏–ª–∫–∞", 
                        "–ú–æ–¥—É–ª—å 'xlwt' –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n"
                        "–í–∏–∫–æ–Ω–∞–π—Ç–µ: pip install xlwt==1.3.0"
                    )
                    return
            else:
                # XLSX —Ñ–æ—Ä–º–∞—Ç (openpyxl)
                df_to_save.to_excel(self.current_file, index=False, engine='openpyxl')
                self.logger.info(f"–§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ XLSX: {self.current_file}")
            
            self.status_bar.setText("‚úÖ –§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
            QMessageBox.information(self, "–£—Å–ø—ñ—Ö", "–§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}")
            import traceback
            self.logger.error(traceback.format_exc())
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏:\n{e}")


    def save_excel_file_as(self):
        """–ó–±–µ—Ä—ñ–≥–∞—î Excel —Ñ–∞–π–ª –ø—ñ–¥ –Ω–æ–≤–∏–º —ñ–º'—è–º"""
        file_path, _ = QFileDialog.getSaveFileName(
            self,
            "–ó–±–µ—Ä–µ–≥—Ç–∏ —è–∫",
            "",
            "Excel Files (*.xlsx)"
        )

        if file_path:
            try:
                df_to_save = self.excel_handler.df.copy()
                
                # ‚¨áÔ∏è –í–ò–î–ê–õ–Ø–Ñ–ú–û —Å–ª—É–∂–±–æ–≤—É –∫–æ–ª–æ–Ω–∫—É '_processed_by_us'
                if '_processed_by_us' in df_to_save.columns:
                    df_to_save = df_to_save.drop(columns=['_processed_by_us'])
                
                # ‚¨áÔ∏è –í–ò–î–ê–õ–Ø–Ñ–ú–û '–°—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å' —è–∫—â–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                if not self.save_old_index_checkbox.isChecked():
                    if '–°—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å' in df_to_save.columns:
                        df_to_save = df_to_save.drop(columns=['–°—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å'])
                        self.logger.info("–ö–æ–ª–æ–Ω–∫–∞ '–°—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å' –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∞")
                
                df_to_save.to_excel(file_path, index=False)
                
                self.current_file = file_path
                self.file_label.setText(os.path.basename(file_path))
                
                self.status_bar.setText("‚úÖ –§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
                QMessageBox.information(self, "–£—Å–ø—ñ—Ö", "–§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
                
            except Exception as e:
                self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}")
                QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏:\n{e}")



    def load_data_to_table(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –≤ —Ç–∞–±–ª–∏—Ü—é"""
        self.display_table(self.excel_handler.df)

    def display_table(self, df):
        self.table.blockSignals(True)

        self.table.setRowCount(len(df))
        self.table.setColumnCount(len(df.columns))

        header_labels = []
        for i, db_col in enumerate(df.columns):
            our_name = self.get_our_field_name_for_column(i)
            if our_name:
                header_labels.append(f"{our_name}\n({db_col})")
            else:
                header_labels.append(str(db_col))

        self.table.setHorizontalHeaderLabels(header_labels)

        for i in range(len(df)):
            for j in range(len(df.columns)):
                value = df.iloc[i, j]
                item = QTableWidgetItem(str(value) if pd.notna(value) else "")
                
                if j == len(df.columns) - 1 and df.columns[j] == '–°—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å':
                    item.setFlags(item.flags() & ~Qt.ItemIsEditable)
                    item.setBackground(QColor(240, 240, 240))
                
                self.table.setItem(i, j, item)

        saved_widths = SettingsManager.get_column_widths()
        if saved_widths and len(saved_widths) == len(df.columns):
            for i, width in enumerate(saved_widths):
                self.table.setColumnWidth(i, width)
        else:
            self.table.horizontalHeader().setSectionResizeMode(QHeaderView.Interactive)
            self.table.resizeColumnsToContents()

        self.table.blockSignals(False)

    def get_our_field_name_for_column(self, col_idx):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–∑–≤—É –ø–æ–ª—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É"""
        if self.excel_handler.df is not None:
            if col_idx == len(self.excel_handler.df.columns) - 1:
                if self.excel_handler.df.columns[col_idx] == '–°—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å':
                    return '–°—Ç.–Ü–Ω–¥.(–ø–æ—á.)'
        
        field_names = {
            'client_id': 'ID',
            'name': '–ü–Ü–ë',
            'region': '–û–±–ª–∞—Å—Ç—å',
            'district': '–†–∞–π–æ–Ω',
            'city': '–ú—ñ—Å—Ç–æ',
            'street': '–í—É–ª–∏—Ü—è',
            'building': '–ë—É–¥.',
            'index': '–Ü–Ω–¥–µ–∫—Å'
        }

        mapping = self.excel_handler.column_mapping
        if not mapping:
            return None

        for field_id, col_indices in mapping.items():
            if col_idx in col_indices:
                return field_names.get(field_id, field_id)

        return None

    def on_row_selected(self):
        selected_rows = self.table.selectionModel().selectedRows()

        if not selected_rows:
            self.search_btn.setEnabled(False)
            return

        self.current_row = selected_rows[0].row()
        self.search_btn.setEnabled(True)
        
        self.results_panel.clear()

        try:
            address = self.excel_handler.get_address_from_row(self.current_row)

            parts = []
            if address.region:
                parts.append(f"–û–±–ª: {address.region}")
            if address.district:
                parts.append(f"–†-–Ω: {address.district}")
            if address.city:
                parts.append(f"–ú—ñ—Å—Ç–æ: {address.city}")
            if address.street:
                parts.append(f"–í—É–ª: {address.street}")
            if address.building:
                parts.append(f"–ë—É–¥: {address.building}")

            text = " | ".join(parts) if parts else "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö"
            self.original_data_label.setText(f"üìç {text}")

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")

    def on_cell_edited(self, item):
        if not item:
            return

        row = item.row()
        col = item.column()
        new_value = item.text()

        self.excel_handler.df.iloc[row, col] = str(new_value)
        self.logger.debug(f"–í—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ –∫–æ–º—ñ—Ä–∫—É [{row}, {col}]: {new_value}")

    def search_address(self):
        if self.current_row < 0:
            QMessageBox.warning(self, "–£–≤–∞–≥–∞", "–û–±–µ—Ä—ñ—Ç—å —Ä—è–¥–æ–∫ –¥–ª—è –ø–æ—à—É–∫—É")
            return

        if not self.search_engine:
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", "–ü–æ—à—É–∫–æ–≤–∏–π –¥–≤–∏–∂–æ–∫ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return

        try:
            self.status_bar.setText("üîç –ü–æ—à—É–∫...")

            address = self.excel_handler.get_address_from_row(self.current_row)

            self.log_search_request(address)
            results = self.search_engine.search(address, max_results=20)
            self.log_search_results(address, results)

            self.search_results = results

            self.results_panel.show_results(results, address.building or "")

            if results:
                self.address_panel.populate_from_results(results)

            self.status_bar.setText(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(results)} –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤")

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {e}")
            import traceback
            traceback.print_exc()
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É:\n{e}")
            self.status_bar.setText("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É")

    def log_search_request(self, address):
        import json
        from datetime import datetime

        log_entry = {
            'timestamp': datetime.now().isoformat(),
            'type': 'search_request',
            'address': address.to_dict()
        }

        search_log_path = os.path.join(config.LOGS_DIR, 'search_queries.jsonl')
        with open(search_log_path, 'a', encoding='utf-8') as f:
            f.write(json.dumps(log_entry, ensure_ascii=False) + '\n')

    def log_search_results(self, address, results):
        import json
        from datetime import datetime

        log_entry = {
            'timestamp': datetime.now().isoformat(),
            'type': 'search_results',
            'query': address.to_dict(),
            'results_count': len(results),
            'all_results': [
                {
                    'city': r.get('city'),
                    'district': r.get('district'),
                    'region': r.get('region'),
                    'street': r.get('street'),
                    'index': r.get('index'),
                    'confidence': r.get('confidence'),
                    'buildings': r.get('buildings', ''),
                    'not_working': r.get('not_working', '')
                }
                for r in results
            ]
        }

        search_log_path = os.path.join(config.LOGS_DIR, 'search_queries.jsonl')
        with open(search_log_path, 'a', encoding='utf-8') as f:
            f.write(json.dumps(log_entry, ensure_ascii=False) + '\n')

    def log_index_applied(self, row_idx, address, index_value):
        """–õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É"""
        import json
        from datetime import datetime

        log_entry = {
            'timestamp': datetime.now().isoformat(),
            'type': 'index_applied',
            'row': row_idx,
            'address': address.to_dict(),
            'applied_index': index_value
        }

        search_log_path = os.path.join(config.LOGS_DIR, 'search_queries.jsonl')
        with open(search_log_path, 'a', encoding='utf-8') as f:
            f.write(json.dumps(log_entry, ensure_ascii=False) + '\n')

    def apply_suggested_index(self, index: str):
        """–ó–∞—Å—Ç–æ—Å–æ–≤—É—î —ñ–Ω–¥–µ–∫—Å –∑ —É—Å—ñ–º–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è–º–∏"""
        if self.current_row < 0:
            return

        try:
            address = self.excel_handler.get_address_from_row(self.current_row)
            
            # ‚¨áÔ∏è –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –¥–ª—è Undo
            old_index = address.index
            self.undo_manager.push({
                'row': self.current_row,
                'old_values': {'index': old_index},
                'new_values': {'index': index}
            })
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
            self.excel_handler.update_row(self.current_row, {'index': index})

            # ‚¨áÔ∏è –î–û–î–ê–ù–û: –ü–æ–∑–Ω–∞—á–∏—Ç–∏ —â–æ —ñ–Ω–¥–µ–∫—Å –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π –ù–ê–ú–ò
            if '_processed_by_us' in self.excel_handler.df.columns:
                self.excel_handler.df.at[self.current_row, '_processed_by_us'] = True

            # –õ–æ–≥—É–≤–∞–Ω–Ω—è
            self.log_index_applied(self.current_row, address, index)

            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ (–ë–ï–ó –∑–∞–ª–∏–≤–∫–∏ –∫–æ–ª—å–æ—Ä–æ–º)
            mapping = self.excel_handler.column_mapping
            if mapping and 'index' in mapping:
                for col_idx in mapping['index']:
                    item = self.table.item(self.current_row, col_idx)
                    if item:
                        item.setText(index)
                        # ‚¨áÔ∏è –ó–ê–ú–Ü–°–¢–¨ –∑–∞–ª–∏–≤–∫–∏ - –∑–µ–ª–µ–Ω–∏–π –∂–∏—Ä–Ω–∏–π —Ç–µ–∫—Å—Ç
                        item.setForeground(QColor("#4CAF50"))
                        font = item.font()
                        font.setBold(True)
                        item.setFont(font)

            self.status_bar.setText(f"‚úÖ –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —ñ–Ω–¥–µ–∫—Å {index}")
            
            # ‚¨áÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º–∏ "–ü–æ—à—É–∫ —ñ–Ω–¥–µ–∫—Å—É"
            self.address_panel.cascade_city_input.clear()
            self.address_panel.cascade_street_input.clear()
            self.address_panel.cascade_street_input.setEnabled(False)
            self.address_panel.cascade_building_combo.clear()
            self.address_panel.cascade_building_combo.hide()
            self.address_panel.cascade_index_input.clear()
            
            # –•–æ–≤–∞—î–º–æ popup
            if hasattr(self.address_panel, 'cascade_city_list'):
                self.address_panel.cascade_city_list.hide()
            if hasattr(self.address_panel, 'cascade_street_list'):
                self.address_panel.cascade_street_list.hide()
            
            # ‚¨áÔ∏è –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ Undo/Redo
            self.update_undo_redo_buttons()
            
            # ‚¨áÔ∏è –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—è–¥–æ–∫
            next_row = self.current_row + 1
            if next_row < self.table.rowCount():
                self.table.selectRow(next_row)
                self.scroll_to_row(next_row)
                self.current_row = next_row
            
            # –û–±—Ä–æ–±–∫–∞ –Ω–∞–ø—ñ–≤–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
            if self.semi_auto_waiting:
                self.semi_auto_waiting = False
                QApplication.processEvents()
                self.continue_semi_auto_processing()

        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É: {e}")
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏:\n{e}")


    def scroll_to_row(self, row):
        """–ü—Ä–æ–∫—Ä—É—á—É—î —Ç–∞–±–ª–∏—Ü—é –¥–æ —Ä—è–¥–∫–∞ (–ø–æ—Å–µ—Ä–µ–¥–∏–Ω—ñ –µ–∫—Ä–∞–Ω—É)"""
        self.table.scrollToItem(
            self.table.item(row, 0),
            QAbstractItemView.PositionAtCenter
        )

    def apply_filter_new(self, filter_type):
        """–§—ñ–ª—å—Ç—Ä: –∑–µ–ª–µ–Ω–∏–π —Ç–µ–∫—Å—Ç = –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"""
        if self.excel_handler.df is None:
            return
        
        mapping = self.excel_handler.column_mapping
        if not mapping or 'index' not in mapping:
            self.logger.warning("Mapping –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            return
        
        index_cols = mapping.get('index', [])
        if not index_cols:
            return
            
        idx_col = index_cols[0]
        
        for row in range(self.table.rowCount()):
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–º—ñ—Ä–∫—É –∑ —ñ–Ω–¥–µ–∫—Å–æ–º
                index_item = self.table.item(row, idx_col)
                
                if index_item:
                    # ‚¨áÔ∏è –ü–ï–†–ï–í–Ü–†–Ø–Ñ–ú–û –ö–û–õ–Ü–† –¢–ï–ö–°–¢–£ (foreground)
                    text_color = index_item.foreground().color()
                    
                    # ‚¨áÔ∏è –ó–µ–ª–µ–Ω–∏–π —Ç–µ–∫—Å—Ç: #4CAF50 = RGB(76, 175, 80)
                    is_green = (
                        text_color.red() == 76 and 
                        text_color.green() == 175 and 
                        text_color.blue() == 80
                    )
                else:
                    is_green = False
                
                # –õ–æ–≥—ñ–∫–∞ —Ñ—ñ–ª—å—Ç—Ä—É
                if filter_type == "–ü—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–æ":
                    show = is_green
                elif filter_type == "–ù–µ–ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–æ":
                    show = not is_green
                else:  # "–í—Å—ñ"
                    show = True
                
                self.table.setRowHidden(row, not show)
                
            except Exception as e:
                self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–∞ —Ä—è–¥–∫–∞ {row}: {e}")
                self.table.setRowHidden(row, False)
                continue
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è
        visible_count = sum(1 for row in range(self.table.rowCount()) if not self.table.isRowHidden(row))
        self.status_bar.setText(f"–§—ñ–ª—å—Ç—Ä '{filter_type}': –ø–æ–∫–∞–∑–∞–Ω–æ {visible_count} –∑ {self.table.rowCount()} —Ä—è–¥–∫—ñ–≤")
        self.logger.info(f"–§—ñ–ª—å—Ç—Ä '{filter_type}': {visible_count}/{self.table.rowCount()}")







    def apply_filter(self, filter_text):
        """–ó–∞—Å—Ç–∞—Ä—ñ–ª–∏–π —Ñ—ñ–ª—å—Ç—Ä (–∑–∞–ª–∏—à–µ–Ω–æ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)"""
        if self.excel_handler.df is None:
            return

        for row in range(self.table.rowCount()):
            is_processed = self.is_row_processed(row)

            if filter_text == "–í—Å—ñ —Ä—è–¥–∫–∏":
                self.table.setRowHidden(row, False)
            elif filter_text == "–¢—ñ–ª—å–∫–∏ –æ–±—Ä–æ–±–ª–µ–Ω—ñ":
                self.table.setRowHidden(row, not is_processed)
            elif filter_text == "–¢—ñ–ª—å–∫–∏ –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω—ñ":
                self.table.setRowHidden(row, is_processed)

    def is_row_processed(self, row):
        item = self.table.item(row, 0)
        if item:
            bg_color = item.background().color()
            return bg_color == QColor(config.COLOR_PROCESSED)
        return False

    def configure_columns(self):
        if self.excel_handler.df is None:
            return

        df_sample = self.excel_handler.df.head(10)
        current_mapping = self.excel_handler.column_mapping or {}

        dialog = ColumnMappingDialog(
            self.excel_handler.get_column_names(),
            current_mapping,
            df_sample,
            self
        )

        if dialog.exec_():
            mapping = dialog.get_mapping()
            self.excel_handler.set_column_mapping(mapping)
            
            self.display_table(self.excel_handler.df)
            self.initialize_old_index()  # ‚¨ÖÔ∏è –¢–£–¢ –ó–ê–ü–û–í–ù–Æ–Ñ–¢–¨–°–Ø

            QMessageBox.information(self, "–£—Å–ø—ñ—Ö", "–í—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ!")


    def initialize_old_index(self):
        """–ö–æ–ø—ñ—é—î —ñ–Ω–¥–µ–∫—Å —É –≤—ñ—Ä—Ç—É–∞–ª—å–Ω—É –∫–æ–ª–æ–Ω–∫—É '–°—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å'"""
        mapping = self.excel_handler.column_mapping
        
        if not mapping or 'index' not in mapping:
            self.logger.warning("–ü–æ–ª–µ 'index' –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–µ")
            return
        
        index_cols = mapping.get('index', [])
        if not index_cols:
            return
        
        idx_col = index_cols[0]
        
        old_index_col_idx = len(self.excel_handler.df.columns) - 1
        old_index_col_name = self.excel_handler.df.columns[old_index_col_idx]
        
        if old_index_col_name == '–°—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å':
            self.excel_handler.df['–°—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å'] = self.excel_handler.df.iloc[:, idx_col].copy()
            self.logger.info(f"‚úÖ –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –∑ –∫–æ–ª–æ–Ω–∫–∏ {idx_col} —É '–°—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å'")
            
            for row in range(min(self.table.rowCount(), len(self.excel_handler.df))):
                value = self.excel_handler.df.iloc[row, old_index_col_idx]
                item = self.table.item(row, old_index_col_idx)
                if item:
                    item.setText(str(value) if pd.notna(value) else "")
                    item.setFlags(item.flags() & ~Qt.ItemIsEditable)
                    item.setBackground(QColor(240, 240, 240))


    def set_index_star(self):
        if self.current_row < 0:
            return
        self.apply_suggested_index("*")

    def start_auto_processing(self):
        if self.current_row < 0:
            self.current_row = 0

        from ui.widgets.auto_processing_dialog import AutoProcessingDialog

        dialog = AutoProcessingDialog(
            self.current_row,
            len(self.excel_handler.df) if self.excel_handler.df is not None else 0,
            self
        )

        if dialog.exec_():
            min_confidence = dialog.get_min_confidence()
            self.process_all_rows(auto_mode=True, min_confidence=min_confidence)

    def start_semi_auto_processing(self):
        if self.current_row < 0:
            self.current_row = 0

        from ui.widgets.auto_processing_dialog import AutoProcessingDialog

        dialog = AutoProcessingDialog(
            self.current_row,
            len(self.excel_handler.df) if self.excel_handler.df is not None else 0,
            self
        )

        if dialog.exec_():
            min_confidence = dialog.get_min_confidence()
            self.semi_auto_min_confidence = min_confidence
            self.process_all_rows(auto_mode=False, min_confidence=min_confidence)

    def continue_semi_auto_processing(self):
        """–ü—Ä–æ–¥–æ–≤–∂—É—î –Ω–∞–ø—ñ–≤–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –æ–±—Ä–æ–±–∫—É –ø—ñ—Å–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É"""
        if not hasattr(self, 'semi_auto_min_confidence'):
            return
        
        next_row = self.semi_auto_current_row + 1
        if next_row < len(self.excel_handler.df):
            self.current_row = next_row
            self.process_all_rows(auto_mode=False, min_confidence=self.semi_auto_min_confidence)

    def process_all_rows(self, auto_mode=True, min_confidence=80):
        """–û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö —Ä—è–¥–∫—ñ–≤ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º/–Ω–∞–ø—ñ–≤–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º —Ä–µ–∂–∏–º–æ–º"""
        if self.excel_handler.df is None:
            return

        self.processing_stopped = False

        # –í–∏–º–∏–∫–∞—î–º–æ –∫–Ω–æ–ø–∫–∏
        self.search_btn.setEnabled(False)
        self.auto_process_btn.setEnabled(False)
        self.semi_auto_btn.setEnabled(False)
        self.column_mapping_btn.setEnabled(False)
        self.save_btn.setEnabled(False)

        # –ö–Ω–æ–ø–∫–∞ –ó–£–ü–ò–ù–ò–¢–ò
        if not hasattr(self, 'stop_btn') or self.stop_btn is None:
            self.stop_btn = QPushButton("‚èπ –ó–£–ü–ò–ù–ò–¢–ò")
            self.stop_btn.clicked.connect(self.stop_processing)
            self.stop_btn.setStyleSheet(
                "background-color: #F44336; color: white; padding: 6px 15px; "
                "font-weight: bold; font-size: 11px;"
            )
            self.statusBar().addPermanentWidget(self.stop_btn)

        total_rows = len(self.excel_handler.df)
        processed_count = 0
        skipped_count = 0

        # ‚¨áÔ∏è –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –ü–†–û–ì–†–ï–° –ë–ê–†
        self.progress_bar.setVisible(True)
        self.progress_bar.setMaximum(total_rows)
        self.progress_bar.setValue(0)
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ–ª–æ–Ω–∫–∏ —ñ–Ω–¥–µ–∫—Å—É
        mapping = self.excel_handler.column_mapping
        if not mapping or 'index' not in mapping:
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–°–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ–≤!")
            self._cleanup_processing()
            return
        
        idx_col = mapping['index'][0]
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ "–°—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å"
        old_index_col_idx = None
        for i, col_name in enumerate(self.excel_handler.df.columns):
            if col_name == '–°—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å':
                old_index_col_idx = i
                break

        for row_idx in range(self.current_row, total_rows):
            QApplication.processEvents()
            
            if self.processing_stopped:
                self.logger.info("‚õî –ó–£–ü–ò–ù–ö–ê –æ–±—Ä–æ–±–∫–∏!")
                break

            # ‚¨áÔ∏è –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –ü–†–û–ì–†–ï–°
            progress = row_idx + 1
            self.progress_bar.setValue(progress)
            percent = int((progress / total_rows) * 100)
            self.status_bar.setText(f"‚è≥ –û–±—Ä–æ–±–∫–∞ {progress}/{total_rows} ({percent}%)...")

            # ‚¨áÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–æ (–ø–æ—Ä—ñ–≤–Ω—é—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏)
            if old_index_col_idx is not None:
                try:
                    current_index = str(self.excel_handler.df.iloc[row_idx, idx_col]).strip()
                    old_index = str(self.excel_handler.df.iloc[row_idx, old_index_col_idx]).strip()
                    
                    # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ
                    if current_index in ['', 'nan', 'None']:
                        current_index = ''
                    if old_index in ['', 'nan', 'None']:
                        old_index = ''
                    
                    # –Ø–∫—â–æ —ñ–Ω–¥–µ–∫—Å–∏ —Ä—ñ–∑–Ω—ñ = –≤–∂–µ –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
                    if current_index != old_index and current_index != '':
                        skipped_count += 1
                        continue
                except Exception as e:
                    self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä—è–¥–∫–∞ {row_idx}: {e}")

            try:
                address = self.excel_handler.get_address_from_row(row_idx)
                results = self.search_engine.search(address, max_results=20)

                self.log_search_request(address)
                self.log_search_results(address, results)

                if not results:
                    continue

                best_result = results[0]
                confidence = best_result.get('confidence', 0)
                not_working = best_result.get('not_working', '')

                # –û–±—Ä–æ–±–∫–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
                if '–¢–∏–º—á–∞—Å–æ–≤–æ –Ω–µ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É—î' in not_working and '–í–ü–ó' not in not_working:
                    index = '*'
                elif '–í–ü–ó' in not_working:
                    match = re.search(r'(\d{5})', not_working)
                    index = match.group(1) if match else '*'
                else:
                    index = best_result.get('index', '')

                if confidence >= min_confidence and index:
                    # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —ñ–Ω–¥–µ–∫—Å
                    self.excel_handler.update_row(row_idx, {'index': index})

                    self.log_index_applied(row_idx, address, index)

                    # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –ë–ï–ó –∑–∞–ª–∏–≤–∫–∏
                    for col_idx in mapping['index']:
                        item = self.table.item(row_idx, col_idx)
                        if item:
                            item.setText(index)
                            item.setForeground(QColor("#4CAF50"))  # –ó–µ–ª–µ–Ω–∏–π —Ç–µ–∫—Å—Ç
                            font = item.font()
                            font.setBold(True)
                            item.setFont(font)

                    processed_count += 1
                    
                    # ‚¨áÔ∏è –°–ö–†–û–õ–ò–ú–û –î–û –ê–ö–¢–ò–í–ù–û–ì–û –†–Ø–î–ö–ê
                    self.scroll_to_row(row_idx)

                elif not auto_mode:
                    # –ù–∞–ø—ñ–≤–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ä–µ–∂–∏–º - –∑—É–ø–∏–Ω–∫–∞ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
                    self.current_row = row_idx
                    self.semi_auto_current_row = row_idx
                    self.table.selectRow(row_idx)
                    self.scroll_to_row(row_idx)
                    
                    self.results_panel.show_results(results, address.building or "")
                    self.address_panel.populate_from_results(results)
                    
                    self.status_bar.setText(
                        f"‚è∏ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É —ñ–Ω–¥–µ–∫—Å—É –¥–ª—è —Ä—è–¥–∫–∞ {row_idx + 1} (—Ç–æ—á–Ω—ñ—Å—Ç—å {confidence}%)"
                    )
                    
                    self.semi_auto_waiting = True
                    self.progress_bar.setVisible(False)
                    
                    # –£–≤—ñ–º–∫–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫–∏
                    self.search_btn.setEnabled(True)
                    self.column_mapping_btn.setEnabled(True)
                    self.save_btn.setEnabled(True)
                    
                    return

            except Exception as e:
                self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ä—è–¥–∫–∞ {row_idx}: {e}")
                continue

        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏
        self._cleanup_processing()
        
        self.status_bar.setText(f"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ: {processed_count}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")

        if auto_mode or not self.semi_auto_waiting:
            QMessageBox.information(
                self,
                "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
                f"–û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–û–±—Ä–æ–±–ª–µ–Ω–æ: {processed_count}\n–ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}"
            )

    def _cleanup_processing(self):
        """–û—á–∏—â–µ–Ω–Ω—è –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏"""
        self.search_btn.setEnabled(True)
        self.auto_process_btn.setEnabled(True)
        self.semi_auto_btn.setEnabled(True)
        self.column_mapping_btn.setEnabled(True)
        self.save_btn.setEnabled(True)

        if hasattr(self, 'stop_btn') and self.stop_btn is not None:
            self.statusBar().removeWidget(self.stop_btn)
            self.stop_btn.deleteLater()
            self.stop_btn = None

        self.progress_bar.setVisible(False)


    def stop_processing(self):
        self.processing_stopped = True
        self.semi_auto_waiting = False

    def refresh_cache(self):
        """–û–Ω–æ–≤–ª—é—î –∫–µ—à magistral.csv —Ç–∞ —ñ–Ω–¥–µ–∫—Å –£–∫—Ä–ø–æ—à—Ç–∏"""
        reply = QMessageBox.question(
            self, 
            "–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É",
            "–û–Ω–æ–≤–∏—Ç–∏ –∫–µ—à magistral.csv —Ç–∞ —ñ–Ω–¥–µ–∫—Å –£–∫—Ä–ø–æ—à—Ç–∏?\n\n–¶–µ –∑–∞–π–º–µ ~3-5 —Ö–≤–∏–ª–∏–Ω.",
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            self.status_bar.setText("‚è≥ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É...")
            QApplication.processEvents()
            
            try:
                # ‚¨áÔ∏è –ü–†–ò–ú–£–°–û–í–ï –ü–ï–†–ï–ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø (–±–µ–∑ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤)
                self.search_engine.loader.load(force_reload=True)
                
                # –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à —É address_panel
                if hasattr(self, 'address_panel'):
                    self.address_panel.set_magistral_cache(self.search_engine.loader.records)
                
                self.status_bar.setText("‚úÖ –ö–µ—à –æ–Ω–æ–≤–ª–µ–Ω–æ")
                self.logger.info("–ö–µ—à magistral.csv —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ")
                
                QMessageBox.information(
                    self, 
                    "–ì–æ—Ç–æ–≤–æ", 
                    "–ö–µ—à —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!"
                )
                
            except Exception as e:
                self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É: {e}")
                self.status_bar.setText(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
                QMessageBox.critical(
                    self,
                    "–ü–æ–º–∏–ª–∫–∞",
                    f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫–µ—à:\n{e}"
                )

            
    def go_to_previous_row(self):
        """–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ä—è–¥–æ–∫"""
        if self.current_row > 0:
            prev_row = self.current_row - 1
            self.table.selectRow(prev_row)
            self.scroll_to_row(prev_row)
            self.current_row = prev_row
        else:
            self.status_bar.setText("‚ö†Ô∏è –¶–µ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫")

    def go_to_next_row(self):
        """–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—è–¥–æ–∫"""
        if self.current_row < self.table.rowCount() - 1:
            next_row = self.current_row + 1
            self.table.selectRow(next_row)
            self.scroll_to_row(next_row)
            self.current_row = next_row
        else:
            self.status_bar.setText("‚ö†Ô∏è –¶–µ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫")

    def setup_shortcuts(self):
        search_shortcut = QShortcut(QKeySequence(Qt.Key_Return), self)
        search_shortcut.activated.connect(self.search_address)

        star_shortcut = QShortcut(QKeySequence("*"), self)
        star_shortcut.activated.connect(self.set_index_star)
        
        # ‚¨áÔ∏è –î–û–î–ê–ù–û: –ù–∞–≤—ñ–≥–∞—Ü—ñ—è —Å—Ç—Ä—ñ–ª–∫–∞–º–∏
        up_shortcut = QShortcut(QKeySequence(Qt.Key_Up), self)
        up_shortcut.activated.connect(self.go_to_previous_row)
        
        down_shortcut = QShortcut(QKeySequence(Qt.Key_Down), self)
        down_shortcut.activated.connect(self.go_to_next_row)

    def undo_action(self):
        """–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –¥—ñ—é"""
        if not self.undo_manager.can_undo():
            return
        
        action = self.undo_manager.undo()
        if not action:
            return
        
        row_idx = action['row']
        old_values = action['old_values']
        
        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ä—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
        for field_id, value in old_values.items():
            self.excel_handler.update_row(row_idx, {field_id: value})
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é
        mapping = self.excel_handler.column_mapping
        if mapping and 'index' in mapping:
            for col_idx in mapping['index']:
                item = self.table.item(row_idx, col_idx)
                if item:
                    item.setText(str(old_values.get('index', '')))
                    item.setForeground(QColor("#000000"))  # –ß–æ—Ä–Ω–∏–π —Ç–µ–∫—Å—Ç
                    font = item.font()
                    font.setBold(False)
                    item.setFont(font)
        
        self.update_undo_redo_buttons()
        self.status_bar.setText("‚Ü©Ô∏è –î—ñ—é –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ")
        self.logger.info(f"Undo: —Ä—è–¥–æ–∫ {row_idx}")

    def redo_action(self):
        """–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –¥—ñ—é"""
        if not self.undo_manager.can_redo():
            return
        
        action = self.undo_manager.redo()
        if not action:
            return
        
        row_idx = action['row']
        new_values = action['new_values']
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –Ω–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
        for field_id, value in new_values.items():
            self.excel_handler.update_row(row_idx, {field_id: value})
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é
        mapping = self.excel_handler.column_mapping
        if mapping and 'index' in mapping:
            for col_idx in mapping['index']:
                item = self.table.item(row_idx, col_idx)
                if item:
                    item.setText(str(new_values.get('index', '')))
                    item.setForeground(QColor("#4CAF50"))  # –ó–µ–ª–µ–Ω–∏–π
                    font = item.font()
                    font.setBold(True)
                    item.setFont(font)
        
        self.update_undo_redo_buttons()
        self.status_bar.setText("‚Ü™Ô∏è –î—ñ—é –ø–æ–≤—Ç–æ—Ä–µ–Ω–æ")
        self.logger.info(f"Redo: —Ä—è–¥–æ–∫ {row_idx}")


    def restore_state(self, state):
        """–í—ñ–¥–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω —Ç–∞–±–ª–∏—Ü—ñ"""
        row_idx = state['row']
        old_values = state['old_values']
        
        for field_id, value in old_values.items():
            self.excel_handler.update_row(row_idx, {field_id: value})
        
        # ‚¨áÔ∏è –î–û–î–ê–ù–û: –°–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å "–ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"
        if '_processed_by_us' in self.excel_handler.df.columns:
            self.excel_handler.df.at[row_idx, '_processed_by_us'] = False
        
        self.display_table(self.excel_handler.df)
        self.status_bar.setText("‚úÖ –î—ñ—é –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ")


    def update_undo_redo_buttons(self):
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω –∫–Ω–æ–ø–æ–∫ Undo/Redo"""
        self.undo_btn.setEnabled(self.undo_manager.can_undo())
        self.redo_btn.setEnabled(self.undo_manager.can_redo())


    def closeEvent(self, event):
        geometry = self.geometry()
        SettingsManager.set_window_geometry(geometry.x(), geometry.y(), geometry.width(), geometry.height())
        
        if self.table.columnCount() > 0:
            widths = [self.table.columnWidth(i) for i in range(self.table.columnCount())]
            SettingsManager.set_column_widths(widths)

        right_splitter = self.findChild(QSplitter)
        if right_splitter:
            sizes = right_splitter.sizes()
            SettingsManager.set_splitter_sizes('right_panel', sizes)

        event.accept()

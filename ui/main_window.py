"""
–ì–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–∏ - –ü–û–í–ù–Ü–°–¢–Æ –ú–Ü–ì–†–û–í–ê–ù–ê –í–ï–†–°–Ü–Ø
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –º–µ–Ω–µ–¥–∂–µ—Ä–∏ –¥–ª—è –≤—Å—ñ—î—ó –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∏
"""
import os
import pandas as pd
from PyQt5.QtWidgets import (
    QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QSplitter,
    QPushButton, QLabel, QTableWidget, QTableWidgetItem, QMessageBox, 
    QProgressBar, QHeaderView, QAbstractItemView, QFrame, 
    QComboBox, QShortcut, QApplication, QCheckBox, QSpinBox
)
from PyQt5.QtCore import Qt, QTimer, QThread, pyqtSignal
from PyQt5.QtGui import QColor, QKeySequence
# –ú–µ–Ω–µ–¥–∂–µ—Ä–∏
from ui.managers import FileManager, SearchManager, ProcessingManager, UIStateManager
from ui.styles import AppStyles

# UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
from ui.widgets.column_mapping_dialog import ColumnMappingDialog
from ui.widgets.address_selector_panel import AddressSelectorPanel
from ui.widgets.results_panel import ResultsPanel
from ui.widgets.auto_processing_dialog import AutoProcessingDialog

# –£—Ç–∏–ª—ñ—Ç–∏
from utils.undo_manager import UndoManager
from utils.settings_manager import SettingsManager
from utils.logger import Logger
from utils.address_parser import parse_full_address_text, is_full_address_in_text

import config

class CacheLoaderThread(QThread):
    """–§–æ–Ω–æ–≤–∏–π –ø–æ—Ç—ñ–∫ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è magistral cache"""
    finished = pyqtSignal(list)
    progress = pyqtSignal(str)
    
    def __init__(self, search_manager):
        super().__init__()
        self.search_manager = search_manager
    
    def run(self):
        """–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è —É —Ñ–æ–Ω–æ–≤–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
        try:
            self.progress.emit("‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–≤—ñ–¥–Ω–∏–∫–∞ —É —Ñ–æ–Ω—ñ...")
            records = self.search_manager.get_magistral_records()
            self.finished.emit(records)
        except Exception as e:
            self.progress.emit(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            self.finished.emit([])

class MainWindow(QMainWindow):
    """
    –ì–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–∏ - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
    
    –í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ:
    - –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—è –º—ñ–∂ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ —Ç–∞ UI
    - –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    - –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è/–≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –≤—ñ–∫–Ω–∞
    """
    
    def __init__(self):
        super().__init__()
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
        self.file_manager = FileManager()
        self.search_manager = SearchManager()
        self.undo_manager = UndoManager()
        self.processing_manager = ProcessingManager(
            self.file_manager.excel_handler,
            self.undo_manager
        )
        self.ui_state = UIStateManager()
        self.logger = Logger()
        self.sort_state = {}
        self.current_sort_column = None
        self.current_sort_order = None
        
        
        # –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
        self.current_row = -1
        self.search_results = []
        
        # –í—ñ–¥–∂–µ—Ç–∏ (—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—é—Ç—å—Å—è –≤ init_ui)
        self.table = None
        self.progress_bar = None
        self.status_bar = None
        self.results_panel = None
        self.address_panel = None
        self.stop_btn = None
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è UI
        self._init_ui()
        self._connect_signals()
        self._setup_callbacks()
        self._setup_shortcuts()
        
        # –ö–µ—à –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π –≤ main.py
        self._cache_loaded = True
        
        self.logger.info("GUI —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
    
    # ==================== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø UI ====================
    
    def setup_table_sorting(self):
        """–ù–∞–ª–∞—à—Ç–æ–≤—É—î —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏ –∫–ª—ñ–∫—É –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫"""
        from PyQt5.QtCore import Qt
        
        # –û—Ç—Ä–∏–º—É—î–º–æ header —Ç–∞–±–ª–∏—Ü—ñ
        header = self.table.horizontalHeader()
        
        # –î–æ–∑–≤–æ–ª—è—î–º–æ –∫–ª—ñ–∫ –ø–æ header
        header.setSectionsClickable(True)
        
        # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É
        header.sectionClicked.connect(self.on_header_clicked)
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫—É—Ä—Å–æ—Ä —Ä—É–∫–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—ñ
        header.setCursor(Qt.PointingHandCursor)
        
        # –î–æ–¥–∞—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω—É –ø—ñ–¥–∫–∞–∑–∫—É
        header.setStyleSheet("""
            QHeaderView::section {
                background-color: #f0f0f0;
                padding: 8px;
                border: 1px solid #d0d0d0;
                font-weight: bold;
            }
            QHeaderView::section:hover {
                background-color: #e0e0e0;
            }
        """)   
       
    def _init_ui(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        self.setWindowTitle(config.WINDOW_TITLE)
        
        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –≥–µ–æ–º–µ—Ç—Ä—ñ—é
        geometry = SettingsManager.get_window_geometry()
        if geometry:
            self.setGeometry(geometry['x'], geometry['y'], geometry['width'], geometry['height'])
        else:
            self.setGeometry(100, 50, config.WINDOW_WIDTH, config.WINDOW_HEIGHT)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π –≤—ñ–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        main_layout = QVBoxLayout()
        main_layout.setSpacing(3)
        main_layout.setContentsMargins(5, 5, 5, 5)
        central_widget.setLayout(main_layout)
        
        # –ü–∞–Ω–µ–ª—ñ
        top_panel = self._create_top_panel()
        main_layout.addWidget(top_panel)
        
        main_splitter = QSplitter(Qt.Horizontal)
        
        left_panel = self._create_table_panel()
        main_splitter.addWidget(left_panel)
        
        right_panel = self._create_right_panel()
        main_splitter.addWidget(right_panel)
        
        main_splitter.setSizes([1100, 600])
        
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π splitter –¥–ª—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –∑–º—ñ–Ω–∏ –≤–∏—Å–æ—Ç–∏ —Å—Ç–∞—Ç—É—Å –±–∞—Ä—É
        vertical_splitter = QSplitter(Qt.Vertical)
        vertical_splitter.addWidget(main_splitter)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å—Ç–∞—Ç—É—Å –±–∞—Ä—É —Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä—É
        status_container = QWidget()
        status_layout = QVBoxLayout()
        status_layout.setSpacing(2)
        status_layout.setContentsMargins(0, 0, 0, 0)
        status_container.setLayout(status_layout)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—é –≤–∏—Å–æ—Ç–æ—é
        self.status_bar = QLabel("–ì–æ—Ç–æ–≤–æ –¥–æ —Ä–æ–±–æ—Ç–∏")
        self.status_bar.setStyleSheet(AppStyles.status_bar())
        self.status_bar.setMinimumHeight(25)
        self.status_bar.setMaximumHeight(60)
        status_layout.addWidget(self.status_bar)
        
        # –ü—Ä–æ–≥—Ä–µ—Å –±–∞—Ä
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.progress_bar.setStyleSheet(AppStyles.progress_bar())
        self.progress_bar.setMaximumHeight(20)
        status_layout.addWidget(self.progress_bar)
        
        vertical_splitter.addWidget(status_container)
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ —Ä–æ–∑–º—ñ—Ä–∏: –æ—Å–Ω–æ–≤–Ω–∞ –æ–±–ª–∞—Å—Ç—å –≤–µ–ª–∏–∫–∞, —Å—Ç–∞—Ç—É—Å - –º–∞–ª–µ–Ω—å–∫–∏–π
        vertical_splitter.setSizes([700, 30])
        vertical_splitter.setStretchFactor(0, 1) 
        vertical_splitter.setStretchFactor(1, 0)  
        
        main_layout.addWidget(vertical_splitter)
    
    def _create_top_panel(self):
        """–í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è"""
        panel = QFrame()
        panel.setMaximumHeight(60)
        layout = QVBoxLayout()
        layout.setSpacing(3)
        layout.setContentsMargins(5, 5, 5, 5)
        
        row1 = QHBoxLayout()
        
        # –§–∞–π–ª
        file_label = QLabel("üìÅ")
        file_label.setStyleSheet("font-size: 14px;")
        row1.addWidget(file_label)
        
        self.file_label = QLabel("–ù–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
        self.file_label.setStyleSheet(AppStyles.file_label())
        row1.addWidget(self.file_label, 1)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ñ–∞–π–ª–∞–º–∏
        load_btn = QPushButton("–í—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª")
        load_btn.setStyleSheet(AppStyles.button_default())
        load_btn.clicked.connect(self.load_file)
        row1.addWidget(load_btn)
        
        self.column_mapping_btn = QPushButton("‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å—Ç–æ–≤–ø—Ü—ñ")
        self.column_mapping_btn.setEnabled(False)
        self.column_mapping_btn.setStyleSheet(AppStyles.button_default())
        self.column_mapping_btn.clicked.connect(self.configure_columns)
        row1.addWidget(self.column_mapping_btn)
        
        self.save_btn = QPushButton("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏")
        self.save_btn.setEnabled(False)
        self.save_btn.setStyleSheet(AppStyles.button_success())
        self.save_btn.clicked.connect(self.save_file)
        row1.addWidget(self.save_btn)
        
        self.save_as_btn = QPushButton("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ —è–∫...")
        self.save_as_btn.setEnabled(False)
        self.save_as_btn.setStyleSheet(AppStyles.button_default())
        self.save_as_btn.clicked.connect(self.save_file_as)
        row1.addWidget(self.save_as_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –∞–¥—Ä–µ—Å
        self.parse_addresses_btn = QPushButton("üîß –†–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –∞–¥—Ä–µ—Å–∏")
        self.parse_addresses_btn.setEnabled(False)
        self.parse_addresses_btn.setStyleSheet(AppStyles.button_warning(font_size="11px"))
        self.parse_addresses_btn.clicked.connect(self.parse_visible_addresses)
        self.parse_addresses_btn.setToolTip("–ü–∞—Ä—Å–∏—Ç—å –∞–¥—Ä–µ—Å–∏ —É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ (—Ç—ñ–ª—å–∫–∏ –≤–∏–¥–∏–º—ñ —Ä—è–¥–∫–∏)")
        row1.addWidget(self.parse_addresses_btn)
        
        # Undo/Redo
        self.undo_btn = QPushButton("‚è™ –í—ñ–¥–º—ñ–Ω–∏—Ç–∏")
        self.undo_btn.setEnabled(False)
        self.undo_btn.setStyleSheet(AppStyles.button_default())
        self.undo_btn.clicked.connect(self.undo_action)
        self.undo_btn.setToolTip("–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –¥—ñ—é (Ctrl+Z)")
        row1.addWidget(self.undo_btn)
        
        self.redo_btn = QPushButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ ‚è©")
        self.redo_btn.setEnabled(False)
        self.redo_btn.setStyleSheet(AppStyles.button_default())
        self.redo_btn.clicked.connect(self.redo_action)
        self.redo_btn.setToolTip("–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –¥—ñ—é (Ctrl+Y)")
        row1.addWidget(self.redo_btn)
        
        # –§—ñ–ª—å—Ç—Ä
        filter_label = QLabel("–§—ñ–ª—å—Ç—Ä:")
        filter_label.setStyleSheet("font-size: 10px; margin-left: 15px;")
        row1.addWidget(filter_label)
        
        self.filter_combo = QComboBox()
        self.filter_combo.addItems(["–í—Å—ñ", "–ü—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", "–ù–µ–ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"])
        self.filter_combo.currentTextChanged.connect(self.apply_filter)
        self.filter_combo.setStyleSheet(AppStyles.combo_box())
        row1.addWidget(self.filter_combo)
        
        # –û–Ω–æ–≤–∏—Ç–∏ –∫–µ—à
        refresh_cache_btn = QPushButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –∫–µ—à")
        refresh_cache_btn.setStyleSheet(AppStyles.button_warning(font_size="11px"))
        refresh_cache_btn.clicked.connect(self.refresh_cache)
        refresh_cache_btn.setToolTip("–û–Ω–æ–≤–∏—Ç–∏ –∫–µ—à magistral.csv")
        row1.addWidget(refresh_cache_btn)
        
        # –ß–µ–∫–±–æ–∫—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ä–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É
        self.save_old_index_checkbox = QCheckBox("–ó–±–µ—Ä—ñ–≥–∞—Ç–∏ —Å—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å")
        self.save_old_index_checkbox.setChecked(False)
        self.save_old_index_checkbox.setStyleSheet("font-size: 10px;")
        row1.addWidget(self.save_old_index_checkbox)
        
        row1.addStretch()
        layout.addLayout(row1)
        
        panel.setLayout(layout)
        return panel
    
    def _create_table_panel(self):
        """–ü–∞–Ω–µ–ª—å –∑ —Ç–∞–±–ª–∏—Ü–µ—é"""
        panel = QWidget()
        layout = QVBoxLayout()
        layout.setSpacing(3)
        layout.setContentsMargins(0, 0, 0, 0)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QHBoxLayout()
        
        label = QLabel("üìã –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö")
        label.setStyleSheet(AppStyles.panel_header())
        header.addWidget(label)
        
        # –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
        nav_btn_prev = QPushButton("‚óÄ –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π")
        nav_btn_prev.clicked.connect(self.go_to_previous_row)
        nav_btn_prev.setStyleSheet(AppStyles.button_default(font_size="10px"))
        header.addWidget(nav_btn_prev)
        
        nav_btn_next = QPushButton("–ù–∞—Å—Ç—É–ø–Ω–∏–π ‚ñ∂")
        nav_btn_next.clicked.connect(self.go_to_next_row)
        nav_btn_next.setStyleSheet(AppStyles.button_default(font_size="10px"))
        header.addWidget(nav_btn_next)
        
        # –†–æ–∑–º—ñ—Ä —à—Ä–∏—Ñ—Ç—É
        font_label = QLabel("–®—Ä–∏—Ñ—Ç:")
        font_label.setStyleSheet("font-size: 10px; margin-left: 10px;")
        header.addWidget(font_label)
        
        self.table_font_spinbox = QSpinBox()
        self.table_font_spinbox.setMinimum(8)
        self.table_font_spinbox.setMaximum(16)
        self.table_font_spinbox.setValue(10)
        self.table_font_spinbox.setSuffix(" px")
        self.table_font_spinbox.setStyleSheet("font-size: 10px; padding: 2px;")
        self.table_font_spinbox.valueChanged.connect(self.update_table_font_size)
        header.addWidget(self.table_font_spinbox)
        
        header.addStretch()
        
        # –ö–Ω–æ–ø–∫–∏ –æ–±—Ä–æ–±–∫–∏
        self.search_btn = QPushButton("üîç –ó–Ω–∞–π—Ç–∏ (Enter)")
        self.search_btn.setEnabled(False)
        self.search_btn.setStyleSheet(AppStyles.button_primary())
        self.search_btn.clicked.connect(self.search_address)
        header.addWidget(self.search_btn)
        
        self.auto_process_btn = QPushButton("‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞")
        self.auto_process_btn.setEnabled(False)
        self.auto_process_btn.setStyleSheet(AppStyles.button_warning())
        self.auto_process_btn.clicked.connect(self.start_auto_processing)
        header.addWidget(self.auto_process_btn)
        
        self.semi_auto_btn = QPushButton("üîÑ –ù–∞–ø—ñ–≤-–∞–≤—Ç–æ")
        self.semi_auto_btn.setEnabled(False)
        self.semi_auto_btn.setStyleSheet("background-color: #9C27B0; color: white; padding: 6px 12px; font-size: 11px;")
        self.semi_auto_btn.clicked.connect(self.start_semi_auto_processing)
        header.addWidget(self.semi_auto_btn)
        
        layout.addLayout(header)
        
        # –¢–∞–±–ª–∏—Ü—è
        self.table = QTableWidget()
        self.table.setStyleSheet(AppStyles.table_main())
        self.table.setEditTriggers(QAbstractItemView.DoubleClicked | QAbstractItemView.EditKeyPressed)
        self.table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.table.setSelectionMode(QAbstractItemView.SingleSelection)
        self.table.itemChanged.connect(self.on_cell_edited)
        self.table.itemSelectionChanged.connect(self.on_row_selected)
        self.setup_table_sorting()
        layout.addWidget(self.table)
        
        # –ü–∞–Ω–µ–ª—å –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        self.original_data_label = QLabel("–û–±–µ—Ä—ñ—Ç—å —Ä—è–¥–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–∞–Ω–∏—Ö")
        self.original_data_label.setStyleSheet(AppStyles.original_data_label())
        self.original_data_label.setWordWrap(True)
        self.original_data_label.setMaximumHeight(60)
        layout.addWidget(self.original_data_label)
        
        panel.setLayout(layout)
        return panel
    
    def _create_right_panel(self):
        """–ü—Ä–∞–≤–∞ –ø–∞–Ω–µ–ª—å"""
        panel = QSplitter(Qt.Vertical)
        
        # –ü–∞–Ω–µ–ª—å –ø—ñ–¥–±–æ—Ä—É –∞–¥—Ä–µ—Å–∏
        self.address_panel = AddressSelectorPanel()
        self.address_panel.index_double_clicked.connect(self.apply_index)
        self.address_panel.setMaximumHeight(320)
        
        # –ü–∞–Ω–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        self.results_panel = ResultsPanel()
        self.results_panel.index_selected.connect(self.apply_index)
        self.results_panel.search_requested.connect(self.search_address)
        
        panel.addWidget(self.address_panel)
        panel.addWidget(self.results_panel)
        
        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏
        sizes = SettingsManager.get_splitter_sizes('right_panel')
        if sizes:
            panel.setSizes(sizes)
        else:
            panel.setSizes([220, 480])
        
        return panel
        
    def on_header_clicked(self, logical_index):
        """
        –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –∫–æ–ª–æ–Ω–∫–∏
        """
        from utils.logger import Logger
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –¥–∞–Ω—ñ
        if self.df is None or self.df.empty:
            return
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        if self.current_sort_column == logical_index:
            # –ü–µ—Ä–µ–º–∏–∫–∞—î–º–æ: asc -> desc -> asc
            if self.current_sort_order == 'asc':
                self.current_sort_order = 'desc'
            else:
                self.current_sort_order = 'asc'
        else:
            # –ù–æ–≤–∞ –∫–æ–ª–æ–Ω–∫–∞ - –ø–æ—á–∏–Ω–∞—î–º–æ –∑ asc
            self.current_sort_column = logical_index
            self.current_sort_order = 'asc'
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –∫–æ–ª–æ–Ω–∫–∏
        column_name = self.df.columns[logical_index]
        
        # –í–∏–∫–æ–Ω—É—î–º–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        self.sort_dataframe(column_name, self.current_sort_order)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
        self.load_data_to_table()
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω—É –ø—ñ–¥–∫–∞–∑–∫—É
        self.update_header_sort_indicator(logical_index, self.current_sort_order)
        
        # –õ–æ–≥—É—î–º–æ
        logger = Logger()
        logger.info(f"–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è: '{column_name}' ({self.current_sort_order})")
        
    def sort_dataframe(self, column_name, order='asc'):
        """
        –°–æ—Ä—Ç—É—î DataFrame –ø–æ –∑–∞–¥–∞–Ω—ñ–π –∫–æ–ª–æ–Ω—Ü—ñ
        """
        from utils.logger import Logger
        
        if self.df is None or column_name not in self.df.columns:
            return
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–ø—Ä—è–º–æ–∫
        ascending = (order == 'asc')
        
        try:
            # –ó–∞–ø–æ–≤–Ω—é—î–º–æ NaN –ø—É—Å—Ç–∏–º–∏ —Ä—è–¥–∫–∞–º–∏
            self.df[column_name] = self.df[column_name].fillna('')
            
            # –°–æ—Ä—Ç—É—î–º–æ
            self.df = self.df.sort_values(
                by=column_name,
                ascending=ascending,
                na_position='last'
            )
            
            # –°–∫–∏–¥–∞—î–º–æ —ñ–Ω–¥–µ–∫—Å
            self.df = self.df.reset_index(drop=True)
            
        except Exception as e:
            logger = Logger()
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è: {e}")
            
    def update_header_sort_indicator(self, column_index, order):
        """
        –û–Ω–æ–≤–ª—é—î –≤—ñ–∑—É–∞–ª—å–Ω–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É
        """
        header = self.table.horizontalHeader()
        
        # –û—á–∏—â–∞—î–º–æ –≤—Å—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
        for i in range(self.table.columnCount()):
            header_text = self.table.horizontalHeaderItem(i).text()
            # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç—Ä—ñ–ª–∫–∏ —è–∫—â–æ —î
            header_text = header_text.replace(' ‚ñ≤', '').replace(' ‚ñº', '')
            self.table.horizontalHeaderItem(i).setText(header_text)
        
        # –î–æ–¥–∞—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–æ –ø–æ—Ç–æ—á–Ω–æ—ó –∫–æ–ª–æ–Ω–∫–∏
        header_text = self.table.horizontalHeaderItem(column_index).text()
        arrow = ' ‚ñ≤' if order == 'asc' else ' ‚ñº'
        self.table.horizontalHeaderItem(column_index).setText(header_text + arrow)
    
    # ==================== –°–ò–ì–ù–ê–õ–ò –¢–ê –ö–û–õ–ë–ï–ö–ò ====================
    
    def _connect_signals(self):
        """–ü—ñ–¥–∫–ª—é—á–∞—î —Å–∏–≥–Ω–∞–ª–∏ –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤"""
        # –°–∏–≥–Ω–∞–ª–∏ –≤—ñ–¥ UIStateManager
        self.ui_state.file_loaded.connect(self._on_file_loaded_signal)
        self.ui_state.file_saved.connect(self._on_file_saved_signal)
        self.ui_state.processing_started.connect(self._on_processing_started_signal)
        self.ui_state.processing_finished.connect(self._on_processing_finished_signal)
        self.ui_state.undo_redo_changed.connect(self._on_undo_redo_changed_signal)
    
    def _setup_callbacks(self):
        """–ù–∞–ª–∞—à—Ç–æ–≤—É—î –∫–æ–ª–±–µ–∫–∏ –¥–ª—è ProcessingManager"""
        self.processing_manager.on_progress_update = self._on_progress_update
        self.processing_manager.on_row_processed = self._on_row_processed
        self.processing_manager.on_semi_auto_pause = self._on_semi_auto_pause
    
    def _setup_shortcuts(self):
        """–ù–∞–ª–∞—à—Ç–æ–≤—É—î –≥–∞—Ä—è—á—ñ –∫–ª–∞–≤—ñ—à—ñ"""
        # Enter - –ø–æ—à—É–∫
        search_shortcut = QShortcut(QKeySequence(Qt.Key_Return), self)
        search_shortcut.activated.connect(self.search_address)
        
        # * - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —ñ–Ω–¥–µ–∫—Å *
        star_shortcut = QShortcut(QKeySequence("*"), self)
        star_shortcut.activated.connect(self.set_index_star)
        
        # Ctrl+Z - Undo
        undo_shortcut = QShortcut(QKeySequence("Ctrl+Z"), self)
        undo_shortcut.activated.connect(self.undo_action)
        
        # Ctrl+Y - Redo
        redo_shortcut = QShortcut(QKeySequence("Ctrl+Y"), self)
        redo_shortcut.activated.connect(self.redo_action)
        
        # –°—Ç—Ä—ñ–ª–∫–∏ - –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è
        up_shortcut = QShortcut(QKeySequence(Qt.Key_Up), self)
        up_shortcut.activated.connect(self.go_to_previous_row)
        
        down_shortcut = QShortcut(QKeySequence(Qt.Key_Down), self)
        down_shortcut.activated.connect(self.go_to_next_row)
    
    def _start_background_cache_loading(self):
        """–ó–∞–ø—É—Å–∫–∞—î —Ñ–æ–Ω–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–µ—à—É"""
        self.cache_thread = CacheLoaderThread(self.search_manager)
        self.cache_thread.progress.connect(self._on_cache_progress)
        self.cache_thread.finished.connect(self._on_cache_loaded)
        self.cache_thread.start()
        
        self.status_bar.setText("‚è≥ –î–æ–≤—ñ–¥–Ω–∏–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è —É —Ñ–æ–Ω—ñ...")
        self.logger.info("–ó–∞–ø—É—â–µ–Ω–æ —Ñ–æ–Ω–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è magistral cache")
    
    def _on_cache_progress(self, message: str):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è"""
        self.status_bar.setText(message)
    
    def _on_cache_loaded(self, records: list):
        """–ö–æ–ª–±–µ–∫ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–µ—à—É"""
        if records and self.address_panel:
            self.address_panel.set_magistral_cache(records)
            self.logger.info(f"Magistral cache –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {len(records)} –∑–∞–ø–∏—Å—ñ–≤")
            self._cache_loaded = True
            self.status_bar.setText(f"‚úÖ –î–æ–≤—ñ–¥–Ω–∏–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ({len(records):,} –∑–∞–ø–∏—Å—ñ–≤). –ì–æ—Ç–æ–≤–æ!")
        else:
            self.logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ magistral cache")
            self.status_bar.setText("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–≤—ñ–¥–Ω–∏–∫–∞")
            self._cache_loaded = False
    
    # ==================== –û–ë–†–û–ë–ù–ò–ö–ò –°–ò–ì–ù–ê–õ–Ü–í ====================
    
    def _on_file_loaded_signal(self, file_path: str):
        """–û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É"""
        self.file_label.setText(os.path.basename(file_path))
        
        # –ê–∫—Ç–∏–≤—É—î–º–æ –∫–Ω–æ–ø–∫–∏
        buttons = {
            'column_mapping': self.column_mapping_btn,
            'save': self.save_btn,
            'save_as': self.save_as_btn,
            'search': self.search_btn,
            'auto_process': self.auto_process_btn,
            'semi_auto': self.semi_auto_btn,
            'parse_addresses': self.parse_addresses_btn  # –î–û–î–ê–ù–û
        }
        self.ui_state.enable_buttons_for_file_loaded(buttons)
        
        self.status_bar.setText(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {os.path.basename(file_path)}")
    
    def _on_file_saved_signal(self):
        """–û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É"""
        self.status_bar.setText("‚úÖ –§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
    
    def _on_processing_started_signal(self):
        """–û–±—Ä–æ–±–∫–∞ –ø–æ—á–∞—Ç–∫—É –æ–±—Ä–æ–±–∫–∏"""
        self.progress_bar.setVisible(True)
        
        buttons = {
            'search': self.search_btn,
            'auto_process': self.auto_process_btn,
            'semi_auto': self.semi_auto_btn,
            'column_mapping': self.column_mapping_btn,
            'save': self.save_btn
        }
        self.ui_state.disable_buttons_for_processing(buttons)
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ó–£–ü–ò–ù–ò–¢–ò
        if not self.stop_btn:
            self.stop_btn = QPushButton("‚èπ –ó–£–ü–ò–ù–ò–¢–ò")
            self.stop_btn.setStyleSheet(AppStyles.button_danger())
            self.stop_btn.clicked.connect(self.stop_processing)
            self.statusBar().addPermanentWidget(self.stop_btn)
    
    def _on_processing_finished_signal(self):
        """–û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏"""
        self.progress_bar.setVisible(False)
        
        buttons = {
            'search': self.search_btn,
            'auto_process': self.auto_process_btn,
            'semi_auto': self.semi_auto_btn,
            'column_mapping': self.column_mapping_btn,
            'save': self.save_btn
        }
        self.ui_state.enable_buttons_after_processing(buttons)
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∫–Ω–æ–ø–∫—É –ó–£–ü–ò–ù–ò–¢–ò
        if self.stop_btn:
            self.statusBar().removeWidget(self.stop_btn)
            self.stop_btn.deleteLater()
            self.stop_btn = None
    
    def _on_undo_redo_changed_signal(self):
        """–û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É Undo/Redo"""
        self.undo_btn.setEnabled(self.undo_manager.can_undo())
        self.redo_btn.setEnabled(self.undo_manager.can_redo())
    
    def _on_progress_update(self, current: int, total: int):
        """–ö–æ–ª–±–µ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É"""
        self.progress_bar.setMaximum(total)
        self.progress_bar.setValue(current)
        
        percent = int((current / total) * 100)
        self.status_bar.setText(f"‚è≥ –û–±—Ä–æ–±–∫–∞ {current}/{total} ({percent}%)...")
        
        # –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ –¥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä—è–¥–∫–∞
        if current - 1 < self.table.rowCount():
            self.scroll_to_row(current - 1)
    
    def _on_row_processed(self, row_idx: int, index: str):
        """–ö–æ–ª–±–µ–∫ –æ–±—Ä–æ–±–∫–∏ —Ä—è–¥–∫–∞"""
        mapping = self.file_manager.excel_handler.column_mapping
        if mapping and 'index' in mapping:
            idx_col = mapping['index'][0]
            item = self.table.item(row_idx, idx_col)
            if item:
                item.setText(index)
                item.setForeground(QColor(AppStyles.Colors.INDEX_APPLIED))
                font = item.font()
                font.setBold(True)
                item.setFont(font)
    
    def _on_semi_auto_pause(self, row_idx: int, results: list):
        """–ö–æ–ª–±–µ–∫ –ø–∞—É–∑–∏ –Ω–∞–ø—ñ–≤–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏"""
        self.current_row = row_idx
        self.table.selectRow(row_idx)
        self.scroll_to_row(row_idx)
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        address = self.file_manager.excel_handler.get_address_from_row(row_idx)
        self.results_panel.show_results(results, address.building or "")
        self.address_panel.populate_from_results(results)
        
        confidence = results[0].get('confidence', 0) if results else 0
        self.status_bar.setText(
            f"‚è∏ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É —ñ–Ω–¥–µ–∫—Å—É –¥–ª—è —Ä—è–¥–∫–∞ {row_idx + 1} (—Ç–æ—á–Ω—ñ—Å—Ç—å {confidence}%)"
        )
    
    # ==================== –û–°–ù–û–í–ù–Ü –ú–ï–¢–û–î–ò ====================
    
    def load_file(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É —á–µ—Ä–µ–∑ FileManager"""
        file_path = self.file_manager.get_file_dialog_path(self, mode='open')
        if not file_path:
            return
        
        success = self.file_manager.load_file(file_path)
        if success:
            self.ui_state.set_file_loaded(file_path)
            self._display_table()
            
            # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏
            if not self.file_manager.excel_handler.column_mapping:
                reply = QMessageBox.question(
                    self,
                    "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤",
                    "–ë–∞–∂–∞—î—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ–≤ –∑–∞—Ä–∞–∑?",
                    QMessageBox.Yes | QMessageBox.No
                )
                if reply == QMessageBox.Yes:
                    self.configure_columns()
        else:
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª")
    
    def save_file(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É —á–µ—Ä–µ–∑ FileManager"""
        save_old_index = self.save_old_index_checkbox.isChecked()
        
        success = self.file_manager.save_file(
            save_old_index=save_old_index,
            parent=self
        )
        
        if success:
            self.ui_state.set_file_saved()
            QMessageBox.information(self, "–£—Å–ø—ñ—Ö", "–§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        else:
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª")
    
    def save_file_as(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –ø—ñ–¥ –Ω–æ–≤–∏–º —ñ–º'—è–º"""
        file_path = self.file_manager.get_file_dialog_path(self, mode='save')
        if not file_path:
            return
        
        save_old_index = self.save_old_index_checkbox.isChecked()
        
        success = self.file_manager.save_file(
            file_path=file_path,
            save_old_index=save_old_index,
            parent=self
        )
        
        if success:
            self.file_manager.current_file = file_path
            self.ui_state.set_file_loaded(file_path)
            self.ui_state.set_file_saved()
            QMessageBox.information(self, "–£—Å–ø—ñ—Ö", "–§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        else:
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª")
    
    def configure_columns(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ —Å—Ç–æ–≤–ø—Ü—ñ–≤"""
        if self.file_manager.excel_handler.df is None or self.file_manager.excel_handler.df.empty:
            return
        
        df_sample = self.file_manager.excel_handler.df.head(10)
        
        dialog = ColumnMappingDialog(
            self.file_manager.excel_handler.get_column_names(),
            self.file_manager.excel_handler.column_mapping or {},
            df_sample,
            self
        )
        
        if dialog.exec_():
            mapping = dialog.get_mapping()
            self.file_manager.excel_handler.set_column_mapping(mapping)
            self._display_table()
            self.file_manager.copy_to_old_index()
            
            QMessageBox.information(self, "–£—Å–ø—ñ—Ö", "–í—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    
    def search_address(self):
        """–ü–æ—à—É–∫ –∞–¥—Ä–µ—Å–∏ —á–µ—Ä–µ–∑ SearchManager"""
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –¥–æ–≤—ñ–¥–Ω–∏–∫
        if not self._cache_loaded:
            QMessageBox.information(
                self, 
                "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è", 
                "–î–æ–≤—ñ–¥–Ω–∏–∫ –º—ñ—Å—Ç —â–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è —É —Ñ–æ–Ω—ñ.\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ."
            )
            return
        
        if self.current_row < 0:
            QMessageBox.warning(self, "–£–≤–∞–≥–∞", "–û–±–µ—Ä—ñ—Ç—å —Ä—è–¥–æ–∫ –¥–ª—è –ø–æ—à—É–∫—É")
            return
        try:
            self.status_bar.setText("üîç –ü–æ—à—É–∫...")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–¥—Ä–µ—Å—É
            address = self.file_manager.excel_handler.get_address_from_row(self.current_row)
            
            # –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—à—É–∫ —á–µ—Ä–µ–∑ SearchManager (–∑ –ª–æ–≥—É–≤–∞–Ω–Ω—è–º)
            results = self.search_manager.search(address, max_results=20)
            
            # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            self.search_results = results
            self.results_panel.show_results(results, address.building or "")
            
            if results:
                self.address_panel.populate_from_results(results)
            
            self.status_bar.setText(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(results)} –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤")
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É: {e}")
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É:\n{e}")
            self.status_bar.setText("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É")
    
    def apply_index(self, index: str):
        """–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É —á–µ—Ä–µ–∑ ProcessingManager"""
        if self.current_row < 0:
            return
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —á–µ—Ä–µ–∑ ProcessingManager (–∑ Undo)
        success = self.processing_manager.apply_index(self.current_row, index)
        
        if success:
            # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é
            mapping = self.file_manager.excel_handler.column_mapping
            if mapping and 'index' in mapping:
                idx_col = mapping['index'][0]
                item = self.table.item(self.current_row, idx_col)
                if item:
                    item.setText(index)
                    item.setForeground(QColor(AppStyles.Colors.INDEX_APPLIED))
                    font = item.font()
                    font.setBold(True)
                    item.setFont(font)
            
            # –õ–æ–≥—É—î–º–æ —á–µ—Ä–µ–∑ SearchManager
            address = self.file_manager.excel_handler.get_address_from_row(self.current_row)
            self.search_manager.log_index_applied(self.current_row, address, index)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω Undo/Redo
            self.ui_state.undo_redo_changed.emit()
            
            self.status_bar.setText(f"‚úÖ –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —ñ–Ω–¥–µ–∫—Å {index}")
            
            # –û—á–∏—â–∞—î–º–æ —Ñ–æ—Ä–º–∏
            self._clear_address_forms()
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—è–¥–æ–∫
            if self.current_row + 1 < self.table.rowCount():
                self.table.selectRow(self.current_row + 1)
                self.scroll_to_row(self.current_row + 1)
            
            # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –Ω–∞–ø—ñ–≤–∞–≤—Ç–æ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if self.processing_manager.semi_auto_waiting:
                self.processing_manager.semi_auto_waiting = False
                QApplication.processEvents()
                self._continue_semi_auto()
    
    def start_auto_processing(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏"""
        if self.current_row < 0:
            self.current_row = 0
        
        dialog = AutoProcessingDialog(
            self.current_row,
            len(self.file_manager.excel_handler.df),
            self
        )
        
        if dialog.exec_():
            min_confidence = dialog.get_min_confidence()
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ–±—Ä–æ–±–∫–∏
            self.ui_state.set_processing_state(True)
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ —á–µ—Ä–µ–∑ ProcessingManager
            stats = self.processing_manager.start_auto_processing(
                start_row=self.current_row,
                total_rows=len(self.file_manager.excel_handler.df),
                min_confidence=min_confidence,
                search_func=lambda addr: self.search_manager.search(addr)
            )
            
            # –ó–∞–≤–µ—Ä—à—É—î–º–æ
            self.ui_state.set_processing_state(False)
            
            self.status_bar.setText(
                f"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ: {stats['processed']}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['skipped']}"
            )
            
            QMessageBox.information(
                self,
                "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
                f"–û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–û–±—Ä–æ–±–ª–µ–Ω–æ: {stats['processed']}\n–ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['skipped']}"
            )
    
    def start_semi_auto_processing(self):
        """–ó–∞–ø—É—Å–∫ –Ω–∞–ø—ñ–≤–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏"""
        if self.current_row < 0:
            self.current_row = 0
        
        dialog = AutoProcessingDialog(
            self.current_row,
            len(self.file_manager.excel_handler.df),
            self
        )
        
        if dialog.exec_():
            min_confidence = dialog.get_min_confidence()
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ–±—Ä–æ–±–∫–∏
            self.ui_state.set_processing_state(True)
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ —á–µ—Ä–µ–∑ ProcessingManager
            stats = self.processing_manager.start_semi_auto_processing(
                start_row=self.current_row,
                total_rows=len(self.file_manager.excel_handler.df),
                min_confidence=min_confidence,
                search_func=lambda addr: self.search_manager.search(addr)
            )
            
            # –Ø–∫—â–æ –Ω–µ —á–µ–∫–∞—î–º–æ - –∑–∞–≤–µ—Ä—à—É—î–º–æ
            if not self.processing_manager.semi_auto_waiting:
                self.ui_state.set_processing_state(False)
                
                self.status_bar.setText(
                    f"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ: {stats['processed']}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['skipped']}"
                )
                
                QMessageBox.information(
                    self,
                    "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
                    f"–û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–û–±—Ä–æ–±–ª–µ–Ω–æ: {stats['processed']}\n–ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['skipped']}"
                )
    
    def _continue_semi_auto(self):
        """–ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –Ω–∞–ø—ñ–≤–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏"""
        stats = self.processing_manager.continue_semi_auto(
            search_func=lambda addr: self.search_manager.search(addr)
        )
        
        if not self.processing_manager.semi_auto_waiting:
            self.ui_state.set_processing_state(False)
            
            self.status_bar.setText(
                f"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ: {stats['processed']}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['skipped']}"
            )
    
    def stop_processing(self):
        """–ó—É–ø–∏–Ω–∫–∞ –æ–±—Ä–æ–±–∫–∏"""
        self.processing_manager.stop_processing()
        self.logger.info("–û–±—Ä–æ–±–∫—É –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    
    def undo_action(self):
        """–í—ñ–¥–º—ñ–Ω–∞ –¥—ñ—ó —á–µ—Ä–µ–∑ UndoManager"""
        if not self.undo_manager.can_undo():
            return
        
        action = self.undo_manager.undo()
        if not action:
            return
        
        row_idx = action['row']
        old_values = action['old_values']
        
        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ä—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
        for field_id, value in old_values.items():
            self.file_manager.excel_handler.update_row(row_idx, {field_id: value})
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é
        mapping = self.file_manager.excel_handler.column_mapping
        if mapping and 'index' in mapping:
            for col_idx in mapping['index']:
                item = self.table.item(row_idx, col_idx)
                if item:
                    item.setText(str(old_values.get('index', '')))
                    item.setForeground(QColor(AppStyles.Colors.INDEX_DEFAULT))
                    font = item.font()
                    font.setBold(False)
                    item.setFont(font)
        
        self.ui_state.undo_redo_changed.emit()
        self.status_bar.setText("‚Ü©Ô∏è –î—ñ—é –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ")
        self.logger.info(f"Undo: —Ä—è–¥–æ–∫ {row_idx}")
    
    def redo_action(self):
        """–ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –¥—ñ—ó —á–µ—Ä–µ–∑ UndoManager"""
        if not self.undo_manager.can_redo():
            return
        
        action = self.undo_manager.redo()
        if not action:
            return
        
        row_idx = action['row']
        new_values = action['new_values']
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –Ω–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
        for field_id, value in new_values.items():
            self.file_manager.excel_handler.update_row(row_idx, {field_id: value})
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é
        mapping = self.file_manager.excel_handler.column_mapping
        if mapping and 'index' in mapping:
            for col_idx in mapping['index']:
                item = self.table.item(row_idx, col_idx)
                if item:
                    item.setText(str(new_values.get('index', '')))
                    item.setForeground(QColor(AppStyles.Colors.INDEX_APPLIED))
                    font = item.font()
                    font.setBold(True)
                    item.setFont(font)
        
        self.ui_state.undo_redo_changed.emit()
        self.status_bar.setText("‚Ü™Ô∏è –î—ñ—é –ø–æ–≤—Ç–æ—Ä–µ–Ω–æ")
        self.logger.info(f"Redo: —Ä—è–¥–æ–∫ {row_idx}")
    
    def refresh_cache(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É magistral.csv"""
        reply = QMessageBox.question(
            self,
            "–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É",
            "–û–Ω–æ–≤–∏—Ç–∏ –∫–µ—à magistral.csv?\n\n–¶–µ –∑–∞–π–º–µ ~3-5 —Ö–≤–∏–ª–∏–Ω.",
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            self.status_bar.setText("‚è≥ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É...")
            QApplication.processEvents()
            
            try:
                # –û–Ω–æ–≤–ª—é—î–º–æ —á–µ—Ä–µ–∑ SearchManager
                self.search_manager.refresh_cache(force_reload=True)
                
                # –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à —É address_panel
                self._load_magistral_cache()
                
                self.status_bar.setText("‚úÖ –ö–µ—à –æ–Ω–æ–≤–ª–µ–Ω–æ")
                QMessageBox.information(self, "–ì–æ—Ç–æ–≤–æ", "–ö–µ—à —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
                
            except Exception as e:
                self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É: {e}")
                self.status_bar.setText(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
                QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫–µ—à:\n{e}")
                

    def parse_visible_addresses(self):
        """–ü–∞—Ä—Å–∏—Ç—å –∞–¥—Ä–µ—Å–∏ —É –≤–∏–¥–∏–º–∏—Ö (–≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö) —Ä—è–¥–∫–∞—Ö"""
        if self.file_manager.excel_handler.df is None or self.file_manager.excel_handler.df.empty:
            QMessageBox.warning(self, "–£–≤–∞–≥–∞", "–ù–µ–º–∞—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É")
            return
        
        mapping = self.file_manager.excel_handler.column_mapping
        if not mapping:
            QMessageBox.warning(self, "–£–≤–∞–≥–∞", "–°–ø–æ—á–∞—Ç–∫—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ–≤")
            return
        
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        reply = QMessageBox.question(
            self,
            "–ü–∞—Ä—Å–∏–Ω–≥ –∞–¥—Ä–µ—Å",
            "–†–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –∞–¥—Ä–µ—Å–∏ —É –≤–∏–¥–∏–º–∏—Ö —Ä—è–¥–∫–∞—Ö?\n\n"
            "–¶–µ –∑–Ω–∞–π–¥–µ —Ä—è–¥–∫–∏ –¥–µ –≤—Å—è –∞–¥—Ä–µ—Å–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –æ–¥–Ω–æ–º—É –ø–æ–ª—ñ\n"
            "—Ç–∞ —Ä–æ–∑–¥—ñ–ª–∏—Ç—å —ó—ó –Ω–∞ –æ–∫—Ä–µ–º—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏.\n\n"
            "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?",
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply != QMessageBox.Yes:
            return
        
        # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –ø–∞—Ä—Å–∏–Ω–≥—É
        from utils.address_parser import parse_full_address_text, is_full_address_in_text
        import pandas as pd
        
        df = self.file_manager.excel_handler.df
        parsed_count = 0
        detected_count = 0  # –°–∫—ñ–ª—å–∫–∏ –∑–Ω–∞–π—à–ª–∏
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å–∏ –∫–æ–ª–æ–Ω–æ–∫
        street_cols = mapping.get('street', [])
        city_cols = mapping.get('city', [])
        building_cols = mapping.get('building', [])
        
        if not street_cols:
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–ö–æ–ª–æ–Ω–∫–∞ '–í—É–ª–∏—Ü—è' –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞")
            return
        
        street_col = street_cols[0]
        city_col = city_cols[0] if city_cols else None
        building_col = building_cols[0] if building_cols else None
        
        # –ü–µ—Ä–µ–±–∏—Ä–∞—î–º–æ –¢–Ü–õ–¨–ö–ò –í–ò–î–ò–ú–Ü —Ä—è–¥–∫–∏
        self.status_bar.setText("‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ –∞–¥—Ä–µ—Å...")
        QApplication.processEvents()
        
        print("\n" + "="*80)
        print("üîß –ü–û–ß–ê–¢–û–ö –ü–ê–†–°–ò–ù–ì–£ –ê–î–†–ï–°")
        print("="*80)
        print(f"–ö–æ–ª–æ–Ω–∫–∞ '–í—É–ª–∏—Ü—è': {street_col}")
        print(f"–ö–æ–ª–æ–Ω–∫–∞ '–ú—ñ—Å—Ç–æ': {city_col}")
        print(f"–ö–æ–ª–æ–Ω–∫–∞ '–ë—É–¥–∏–Ω–æ–∫': {building_col}")
        print("="*80 + "\n")
        
        for visual_row in range(self.table.rowCount()):
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ —Ä—è–¥–∫–∏ (–≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ)
            if self.table.isRowHidden(visual_row):
                continue
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ —Ç–∞–±–ª–∏—Ü—ñ
            street_item = self.table.item(visual_row, street_col)
            if not street_item:
                continue
            
            street_value = street_item.text()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –ø–æ–≤–Ω–∞ –∞–¥—Ä–µ—Å–∞
            if is_full_address_in_text(street_value):
                detected_count += 1
                
                print(f"\nüìç –†–Ø–î–û–ö {visual_row + 1}:")
                print(f"   –í–∏—Ö—ñ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç: {street_value[:100]}...")
                
                # –ü–∞—Ä—Å–∏–º–æ
                parsed = parse_full_address_text(street_value)
                
                print(f"   ‚úì –Ü–Ω–¥–µ–∫—Å: '{parsed['index']}'")
                print(f"   ‚úì –ú—ñ—Å—Ç–æ: '{parsed['city']}'")
                print(f"   ‚úì –í—É–ª–∏—Ü—è: '{parsed['street']}'")
                print(f"   ‚úì –ë—É–¥–∏–Ω–æ–∫: '{parsed['building']}'")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –≤–∏—Ç—è–≥–ª–∏
                if not parsed['city'] and not parsed['street']:
                    print(f"   ‚ö†Ô∏è –ü–†–û–ü–£–©–ï–ù–û: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ –º—ñ—Å—Ç–æ —Ç–∞ –≤—É–ª–∏—Ü—é")
                    continue
                
                # –ó–∞–ø–∏—Å—É—î–º–æ –≤ DataFrame
                updated = False
                
                if city_col is not None and parsed['city']:
                    old_city = df.iloc[visual_row, city_col] if pd.notna(df.iloc[visual_row, city_col]) else ""
                    df.iloc[visual_row, city_col] = parsed['city']
                    city_item = self.table.item(visual_row, city_col)
                    if city_item:
                        city_item.setText(parsed['city'])
                    print(f"   üìù –ú—ñ—Å—Ç–æ: '{old_city}' ‚Üí '{parsed['city']}'")
                    updated = True
                
                if parsed['street']:
                    df.iloc[visual_row, street_col] = parsed['street']
                    street_item.setText(parsed['street'])
                    print(f"   üìù –í—É–ª–∏—Ü—è: ‚Üí '{parsed['street']}'")
                    updated = True
                
                if building_col is not None and parsed['building']:
                    old_building = df.iloc[visual_row, building_col] if pd.notna(df.iloc[visual_row, building_col]) else ""
                    df.iloc[visual_row, building_col] = parsed['building']
                    building_item = self.table.item(visual_row, building_col)
                    if building_item:
                        building_item.setText(parsed['building'])
                    print(f"   üìù –ë—É–¥–∏–Ω–æ–∫: '{old_building}' ‚Üí '{parsed['building']}'")
                    updated = True
                
                if updated:
                    parsed_count += 1
                    print(f"   ‚úÖ –û–ù–û–í–õ–ï–ù–û")
                else:
                    print(f"   ‚ö†Ô∏è –ù–ï –û–ù–û–í–õ–ï–ù–û (–ø–æ—Ä–æ–∂–Ω—ñ –¥–∞–Ω—ñ)")
        
        print("\n" + "="*80)
        print(f"üèÅ –ó–ê–í–ï–†–®–ï–ù–û –ü–ê–†–°–ò–ù–ì")
        print(f"   –ó–Ω–∞–π–¥–µ–Ω–æ –∞–¥—Ä–µ—Å —É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ: {detected_count}")
        print(f"   –£—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø–∞—Ä—Å–æ–≤–∞–Ω–æ: {parsed_count}")
        print("="*80 + "\n")
        
        self.status_bar.setText(f"‚úÖ –†–æ–∑–ø–∞—Ä—Å–æ–≤–∞–Ω–æ {parsed_count} –∑ {detected_count} –∞–¥—Ä–µ—Å")
        
        if parsed_count > 0:
            QMessageBox.information(
                self,
                "–ì–æ—Ç–æ–≤–æ",
                f"–ó–Ω–∞–π–¥–µ–Ω–æ –∞–¥—Ä–µ—Å —É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ: {detected_count}\n"
                f"–£—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø–∞—Ä—Å–æ–≤–∞–Ω–æ: {parsed_count}\n\n"
                f"–î–∏–≤—ñ—Ç—å—Å—è –¥–µ—Ç–∞–ª—ñ –≤ –∫–æ–Ω—Å–æ–ª—ñ.\n\n"
                "–¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –æ–±—Ä–æ–±–∫—É –∑–Ω–æ–≤—É."
            )
        else:
            QMessageBox.information(
                self,
                "–†–µ–∑—É–ª—å—Ç–∞—Ç",
                f"–ó–Ω–∞–π–¥–µ–Ω–æ –∞–¥—Ä–µ—Å —É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ: {detected_count}\n"
                f"–£—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø–∞—Ä—Å–æ–≤–∞–Ω–æ: {parsed_count}\n\n"
                "–î–∏–≤—ñ—Ç—å—Å—è –¥–µ—Ç–∞–ª—ñ –≤ –∫–æ–Ω—Å–æ–ª—ñ."
            )
    
    def set_index_star(self):
        """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î —ñ–Ω–¥–µ–∫—Å *"""
        if self.current_row >= 0:
            self.apply_index("*")
    
    # ==================== –†–û–ë–û–¢–ê –ó –¢–ê–ë–õ–ò–¶–ï–Æ ====================
    
    def _display_table(self):
        """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –¥–∞–Ω—ñ –≤ —Ç–∞–±–ª–∏—Ü—ñ"""
        df = self.file_manager.excel_handler.df
        
        if df is None or df.empty:
            return
        
        self.table.blockSignals(True)
        
        self.table.setRowCount(len(df))
        self.table.setColumnCount(len(df.columns))
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        header_labels = []
        for i, db_col in enumerate(df.columns):
            our_name = self._get_our_field_name_for_column(i)
            if our_name:
                header_labels.append(f"{our_name}\n({db_col})")
            else:
                header_labels.append(str(db_col))
        
        self.table.setHorizontalHeaderLabels(header_labels)
        
        # –ó–∞–ø–æ–≤–Ω—é—î–º–æ –¥–∞–Ω—ñ
        for i in range(len(df)):
            for j in range(len(df.columns)):
                value = df.iloc[i, j]
                item = QTableWidgetItem(str(value) if pd.notna(value) else "")
                
                # –°—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å - readonly
                if j == len(df.columns) - 1 and df.columns[j] == '–°—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å':
                    item.setFlags(item.flags() & ~Qt.ItemIsEditable)
                    item.setBackground(QColor(240, 240, 240))
                
                self.table.setItem(i, j, item)
        
        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —à–∏—Ä–∏–Ω–∏ —Å—Ç–æ–≤–ø—Ü—ñ–≤
        saved_widths = SettingsManager.get_column_widths()
        if saved_widths and len(saved_widths) == len(df.columns):
            for i, width in enumerate(saved_widths):
                self.table.setColumnWidth(i, width)
        else:
            self.table.horizontalHeader().setSectionResizeMode(QHeaderView.Interactive)
            self.table.resizeColumnsToContents()
        
        self.table.blockSignals(False)
    
    def _get_our_field_name_for_column(self, col_idx):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–∑–≤—É –ø–æ–ª—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É"""
        if self.file_manager.excel_handler.df is not None:
            if col_idx == len(self.file_manager.excel_handler.df.columns) - 1:
                if self.file_manager.excel_handler.df.columns[col_idx] == '–°—Ç–∞—Ä–∏–π —ñ–Ω–¥–µ–∫—Å':
                    return '–°—Ç.–Ü–Ω–¥.(–ø–æ—á.)'
        
        field_names = {
            'client_id': 'ID',
            'name': '–ü–Ü–ë',
            'region': '–û–±–ª–∞—Å—Ç—å',
            'district': '–†–∞–π–æ–Ω',
            'city': '–ú—ñ—Å—Ç–æ',
            'street': '–í—É–ª–∏—Ü—è',
            'building': '–ë—É–¥.',
            'index': '–Ü–Ω–¥–µ–∫—Å'
        }
        
        mapping = self.file_manager.excel_handler.column_mapping
        if not mapping:
            return None
        
        for field_id, col_indices in mapping.items():
            if col_idx in col_indices:
                return field_names.get(field_id, field_id)
        
        return None
    
    def on_row_selected(self):
        """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ä—è–¥–∫–∞"""
        selected_rows = self.table.selectionModel().selectedRows()
        
        if not selected_rows:
            self.search_btn.setEnabled(False)
            return
        
        self.current_row = selected_rows[0].row()
        self.ui_state.set_current_row(self.current_row)
        self.search_btn.setEnabled(True)
        self.results_panel.clear()
        
        # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
        try:
            address = self.file_manager.excel_handler.get_address_from_row(self.current_row)
            parts = []
            
            if address.region:
                parts.append(f"–û–±–ª–∞—Å—Ç—å: {address.region}")
            if address.district:
                parts.append(f"–†–∞–π–æ–Ω: {address.district}")
            if address.city:
                parts.append(f"–ú—ñ—Å—Ç–æ: {address.city}")
            if address.street:
                parts.append(f"–í—É–ª–∏—Ü—è: {address.street}")
            if address.building:
                parts.append(f"–ë—É–¥–∏–Ω–æ–∫: {address.building}")
            
            text = " | ".join(parts) if parts else "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö"
            self.original_data_label.setText(f"üìã –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ: {text}")
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫
        self.search_address()
    
    def on_cell_edited(self, item):
        """–û–±—Ä–æ–±–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ–º—ñ—Ä–∫–∏"""
        if not item:
            return
        
        row = item.row()
        col = item.column()
        new_value = item.text()
        
        # –û–Ω–æ–≤–ª—é—î–º–æ DataFrame
        self.file_manager.excel_handler.df.iloc[row, col] = str(new_value)
        
        self.logger.debug(f"–ö–æ–º—ñ—Ä–∫–∞ –∑–º—ñ–Ω–µ–Ω–∞: row={row}, col={col}, value={new_value}")
        
        # –ó–µ–ª–µ–Ω–∏–π –∫–æ–ª—ñ—Ä –¥–ª—è —ñ–Ω–¥–µ–∫—Å—É –ø—Ä–∏ —Ä—É—á–Ω—ñ–π –∑–º—ñ–Ω—ñ
        mapping = self.file_manager.excel_handler.column_mapping
        if mapping and 'index' in mapping:
            index_col = mapping['index'][0]
            if col == index_col and new_value.strip():
                item.setForeground(QColor(AppStyles.Colors.INDEX_APPLIED))
    
    def apply_filter(self, filter_type):
        """–§—ñ–ª—å—Ç—Ä: –∑–µ–ª–µ–Ω–∏–π —Ç–µ–∫—Å—Ç = –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"""
        if self.file_manager.excel_handler.df is None:
            return
        
        mapping = self.file_manager.excel_handler.column_mapping
        if not mapping or 'index' not in mapping:
            self.logger.warning("Mapping –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            return
        
        index_cols = mapping.get('index', [])
        if not index_cols:
            return
        
        idx_col = index_cols[0]
        
        for row in range(self.table.rowCount()):
            try:
                index_item = self.table.item(row, idx_col)
                
                if index_item:
                    text_color = index_item.foreground().color()
                    is_green = (
                        text_color.red() == 76 and
                        text_color.green() == 175 and
                        text_color.blue() == 80
                    )
                else:
                    is_green = False
                
                if filter_type == "–ü—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–æ":
                    show = is_green
                elif filter_type == "–ù–µ–ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–æ":
                    show = not is_green
                else:  # "–í—Å—ñ"
                    show = True
                
                self.table.setRowHidden(row, not show)
                
            except Exception as e:
                self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–∞ —Ä—è–¥–∫–∞ {row}: {e}")
                self.table.setRowHidden(row, False)
                continue
        
        visible_count = sum(1 for row in range(self.table.rowCount()) if not self.table.isRowHidden(row))
        self.status_bar.setText(f"–§—ñ–ª—å—Ç—Ä '{filter_type}': –ø–æ–∫–∞–∑–∞–Ω–æ {visible_count} –∑ {self.table.rowCount()} —Ä—è–¥–∫—ñ–≤")
    
    def update_table_font_size(self, size):
        """–û–Ω–æ–≤–ª—é—î —Ä–æ–∑–º—ñ—Ä —à—Ä–∏—Ñ—Ç—É —Ç–∞–±–ª–∏—Ü—ñ"""
        self.table.setStyleSheet(f"font-size: {size}px;")
    
    def scroll_to_row(self, row):
        """–ü—Ä–æ–∫—Ä—É—á—É—î —Ç–∞–±–ª–∏—Ü—é –¥–æ —Ä—è–¥–∫–∞"""
        if row >= 0 and row < self.table.rowCount():
            self.table.scrollToItem(
                self.table.item(row, 0),
                QAbstractItemView.PositionAtCenter
            )
    
    # ==================== –ù–ê–í–Ü–ì–ê–¶–Ü–Ø ====================
    
    def go_to_previous_row(self):
        """–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ä—è–¥–æ–∫"""
        if self.current_row > 0:
            prev_row = self.current_row - 1
            self.table.selectRow(prev_row)
            self.scroll_to_row(prev_row)
            self.current_row = prev_row
        else:
            self.status_bar.setText("‚ö†Ô∏è –¶–µ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫")
    
    def go_to_next_row(self):
        """–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—è–¥–æ–∫"""
        if self.current_row < self.table.rowCount() - 1:
            next_row = self.current_row + 1
            self.table.selectRow(next_row)
            self.scroll_to_row(next_row)
            self.current_row = next_row
        else:
            self.status_bar.setText("‚ö†Ô∏è –¶–µ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫")
    
    # ==================== –î–û–ü–û–ú–Ü–ñ–ù–Ü –ú–ï–¢–û–î–ò ====================
    
    def _clear_address_forms(self):
        """–û—á–∏—â–∞—î —Ñ–æ—Ä–º–∏ –≤–≤–µ–¥–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏"""
        # –û—á–∏—â–∞—î–º–æ –∫–∞—Å–∫–∞–¥–Ω—É —Ñ–æ—Ä–º—É
        self.address_panel.cascade_city_input.clear()
        self.address_panel.cascade_street_input.clear()
        self.address_panel.cascade_street_input.setEnabled(False)
        self.address_panel.cascade_building_combo.clear()
        self.address_panel.cascade_building_combo.hide()
        self.address_panel.cascade_index_input.clear()
        
        # –•–æ–≤–∞—î–º–æ popup —Å–ø–∏—Å–∫–∏
        if hasattr(self.address_panel, 'cascade_city_list'):
            self.address_panel.cascade_city_list.hide()
        if hasattr(self.address_panel, 'cascade_street_list'):
            self.address_panel.cascade_street_list.hide()
    
    # ==================== –ó–ê–ö–†–ò–¢–¢–Ø –í–Ü–ö–ù–ê ====================
    
    def closeEvent(self, event):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ"""
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≥–µ–æ–º–µ—Ç—Ä—ñ—é –≤—ñ–∫–Ω–∞
        geometry = self.geometry()
        SettingsManager.set_window_geometry(
            geometry.x(), geometry.y(),
            geometry.width(), geometry.height()
        )
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —à–∏—Ä–∏–Ω–∏ —Å—Ç–æ–≤–ø—Ü—ñ–≤
        if self.table.columnCount() > 0:
            widths = [self.table.columnWidth(i) for i in range(self.table.columnCount())]
            SettingsManager.set_column_widths(widths)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ splitter
        right_splitter = self.findChild(QSplitter)
        if right_splitter:
            sizes = right_splitter.sizes()
            SettingsManager.set_splitter_sizes('right_panel', sizes)
        
        event.accept()
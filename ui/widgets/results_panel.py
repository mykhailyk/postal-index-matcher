"""
–ü–∞–Ω–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É - –û–°–¢–ê–¢–û–ß–ù–ê –í–ï–†–°–Ü–Ø
"""
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
    QListWidget, QListWidgetItem, QSpinBox, QPushButton
)
from PyQt5.QtCore import pyqtSignal, Qt
from PyQt5.QtGui import QFont


class ResultsPanel(QWidget):
    """–ü–∞–Ω–µ–ª—å –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É"""
    
    index_selected = pyqtSignal(str)
    search_requested = pyqtSignal()  # ‚¨ÖÔ∏è –î–û–î–ê–ù–û
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.current_results = []
        self.font_size = 9
        self.buildings_per_line = 20
        self.init_ui()
    
    def init_ui(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QLabel("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É")
        header.setStyleSheet("font-weight: bold; font-size: 12px; padding: 5px;")
        layout.addWidget(header)
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—å –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        control_layout = QHBoxLayout()

        # ‚¨áÔ∏è –ö–ù–û–ü–ö–ê –ó–ù–ê–ô–¢–ò
        self.search_btn = QPushButton("üîç –ó–Ω–∞–π—Ç–∏ (Enter)")
        self.search_btn.setStyleSheet("padding: 5px 10px; font-size: 11px;")
        self.search_btn.clicked.connect(self.on_search_clicked)
        control_layout.addWidget(self.search_btn)
        
        control_layout.addWidget(QLabel("–ü–æ–∫–∞–∑—É–≤–∞—Ç–∏:"))
        self.result_count_spin = QSpinBox()
        self.result_count_spin.setRange(1, 50)
        self.result_count_spin.setValue(20)
        self.result_count_spin.setMaximumWidth(60)
        self.result_count_spin.valueChanged.connect(self.on_result_count_changed)
        control_layout.addWidget(self.result_count_spin)
        
        control_layout.addWidget(QLabel(" | –®—Ä–∏—Ñ—Ç:"))
        self.font_size_spin = QSpinBox()
        self.font_size_spin.setRange(8, 16)
        self.font_size_spin.setValue(9)
        self.font_size_spin.setMaximumWidth(50)
        self.font_size_spin.valueChanged.connect(self.on_font_size_changed)
        control_layout.addWidget(self.font_size_spin)
        
        control_layout.addWidget(QLabel(" | –ë—É–¥–∏–Ω–∫—ñ–≤:"))
        self.buildings_spin = QSpinBox()
        self.buildings_spin.setRange(5, 30)
        self.buildings_spin.setValue(20)
        self.buildings_spin.setMaximumWidth(50)
        self.buildings_spin.valueChanged.connect(self.on_buildings_count_changed)
        control_layout.addWidget(self.buildings_spin)
        
        control_layout.addStretch()
        layout.addLayout(control_layout)
        
        # –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        self.results_list = QListWidget()
        self.results_list.setAlternatingRowColors(True)
        self.results_list.setWordWrap(True)
        
        self.results_list.setStyleSheet("""
            QListWidget {
                border: 1px solid #c0c0c0;
                background-color: white;
            }
            QListWidget::item {
                padding: 8px;
                border-bottom: 1px solid #e0e0e0;
            }
            QListWidget::item:alternate {
                background-color: #f9f9f9;
            }
            QListWidget::item:hover {
                background-color: #f0f0f0;
            }
            QListWidget::item:selected {
                background-color: transparent;
                color: #000000;
            }
            QListWidget::item:selected:hover {
                background-color: #f5f5f5;
            }
        """)
        
        self.results_list.itemDoubleClicked.connect(self.on_result_double_clicked)
        self.results_list.itemSelectionChanged.connect(self.on_selection_changed)
        layout.addWidget(self.results_list)
    
    def on_selection_changed(self):
        """–û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –≤–∏–±–æ—Ä—É - —Ä–æ–±–∏–º–æ –∂–∏—Ä–Ω–∏–º"""
        selected_items = self.results_list.selectedItems()
        
        # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∂–∏—Ä–Ω–∏–π –∑ —É—Å—ñ—Ö
        for i in range(self.results_list.count()):
            item = self.results_list.item(i)
            font = QFont()
            font.setPointSize(self.font_size)
            font.setBold(False)
            item.setFont(font)
        
        # –†–æ–±–∏–º–æ –∂–∏—Ä–Ω–∏–º –≤–∏–±—Ä–∞–Ω–∏–π
        if selected_items:
            font = QFont()
            font.setPointSize(self.font_size)
            font.setBold(True)
            selected_items[0].setFont(font)
    
    def on_result_count_changed(self, value):
        """–û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"""
        if self.current_results:
            self.show_results(self.current_results, "")
    
    def on_font_size_changed(self, value):
        """–ó–º—ñ–Ω–∞ —Ä–æ–∑–º—ñ—Ä—É —à—Ä–∏—Ñ—Ç—É"""
        self.font_size = value
        if self.current_results:
            self.show_results(self.current_results, "")
    
    def on_buildings_count_changed(self, value):
        """–ó–º—ñ–Ω–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –±—É–¥–∏–Ω–∫—ñ–≤ –Ω–∞ —Ä—è–¥–æ–∫"""
        self.buildings_per_line = value
        if self.current_results:
            self.show_results(self.current_results, "")
    
    def on_search_clicked(self):
        """–û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—É –Ω–∞ –ó–Ω–∞–π—Ç–∏"""
        self.search_requested.emit()
    
    def show_results(self, results, building_number=""):
        """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É"""
        self.current_results = results
        self.results_list.clear()
        
        if not results:
            item = QListWidgetItem("‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            item.setFlags(Qt.NoItemFlags)
            self.results_list.addItem(item)
            return
        
        max_results = self.result_count_spin.value()
        
        for i, result in enumerate(results[:max_results]):
            confidence = result.get('confidence', 0)
            index = result.get('index', '')
            city = result.get('city_ua', '')
            street = result.get('street_ua', '')
            buildings = result.get('buildings', '')
            region = result.get('region', '')
            district = result.get('district', '')
            not_working = result.get('not_working', '')
            
            # –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–æ—á–Ω–æ—Å—Ç—ñ
            if confidence >= 90:
                icon = "üü¢"
            elif confidence >= 70:
                icon = "üü°"
            else:
                icon = "üî¥"
            
            # –†–Ø–î–û–ö 1: –ù–ü, —Ä–∞–π–æ–Ω, –æ–±–ª–∞—Å—Ç—å
            text = f"{icon} {city}"
            
            if district:
                text += f", {district} —Ä-–Ω"
            if region:
                text += f", {region} –æ–±–ª."
            
            # –†–Ø–î–û–ö 2: –í—É–ª–∏—Ü—è —ñ –±—É–¥–∏–Ω–∫–∏
            buildings_list = [b.strip() for b in buildings.split(',') if b.strip()]
            buildings_lines = []
            
            for j in range(0, len(buildings_list), self.buildings_per_line):
                line_buildings = buildings_list[j:j + self.buildings_per_line]
                buildings_lines.append(','.join(line_buildings))
            
            text += f"\n{street}, {buildings_lines[0] if buildings_lines else ''}"
            
            # –î–æ–¥–∞—î–º–æ —ñ–Ω—à—ñ —Ä—è–¥–∫–∏ –±—É–¥–∏–Ω–∫—ñ–≤
            if len(buildings_lines) > 1:
                for line in buildings_lines[1:]:
                    text += f"\n{line}"
            
            # –†–Ø–î–û–ö 3: –Ü–Ω–¥–µ–∫—Å
            text += f"\n{index} ({confidence}%)"
            
            # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
            if not_working:
                if '–¢–∏–º—á–∞—Å–æ–≤–æ –Ω–µ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É—î' in not_working:
                    text += " ‚ö†Ô∏è"
                if '–í–ü–ó' in not_working:
                    text += " üì¶"
            
            item = QListWidgetItem(text)
            item.setTextAlignment(Qt.AlignLeft | Qt.AlignVCenter)
            item.setData(Qt.UserRole, result)
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–º—ñ—Ä —à—Ä–∏—Ñ—Ç—É
            font = QFont()
            font.setPointSize(self.font_size)
            item.setFont(font)
            
            self.results_list.addItem(item)
    
    def on_result_double_clicked(self, item):
        """–û–±—Ä–æ–±–∫–∞ –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ –∫–ª—ñ–∫—É –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        result = item.data(Qt.UserRole)
        if result:
            index = result.get('index', '')
            not_working = result.get('not_working', '')
            
            if '–¢–∏–º—á–∞—Å–æ–≤–æ –Ω–µ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É—î' in not_working and '–í–ü–ó' not in not_working:
                index = '*'
            elif '–í–ü–ó' in not_working:
                import re
                match = re.search(r'(\d{5})', not_working)
                if match:
                    index = match.group(1)
                else:
                    index = '*'
            
            if index:
                self.index_selected.emit(index)
    
    def get_selected_result(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –≤–∏–±—Ä–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        current_item = self.results_list.currentItem()
        if current_item:
            return current_item.data(Qt.UserRole)
        return None
    
    def clear(self):
        """–û—á–∏—â–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏"""
        self.results_list.clear()
        self.current_results = []

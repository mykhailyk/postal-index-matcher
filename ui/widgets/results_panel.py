"""
–ü–∞–Ω–µ–ª—å –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ—à—É–∫—É
"""
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
    QListWidget, QPushButton, QFrame, QListWidgetItem, QMessageBox
)
from PyQt5.QtCore import pyqtSignal, Qt, QSize
from PyQt5.QtGui import QColor, QFont
import config
import re


class ResultsPanel(QWidget):
    """–ü–∞–Ω–µ–ª—å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É"""
    
    apply_index_clicked = pyqtSignal(dict)
    fix_address_clicked = pyqtSignal(dict)
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        self.current_results = []
        self.query_building = ""
        self.current_selected_row = -1
        
        self.init_ui()
    
    def init_ui(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î UI"""
        layout = QVBoxLayout()
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(5)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        header_layout = QHBoxLayout()
        title = QLabel("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É")
        title.setStyleSheet("font-weight: bold; font-size: 13px; padding: 5px;")
        header_layout.addWidget(title)
        
        self.count_label = QLabel("")
        self.count_label.setStyleSheet("color: #666; font-size: 11px; padding: 5px;")
        header_layout.addWidget(self.count_label)
        header_layout.addStretch()
        
        layout.addLayout(header_layout)
        
        # –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        self.results_list = QListWidget()
        
        # –°–¢–ò–õ–¨ –ë–ï–ó –í–ò–î–Ü–õ–ï–ù–ù–Ø
        self.results_list.setStyleSheet("""
            QListWidget {
                font-size: 11px;
                border: 1px solid #ccc;
                background-color: white;
            }
            QListWidget::item {
                padding: 8px;
                border-bottom: 1px solid #E0E0E0;
                margin-bottom: 2px;
            }
            QListWidget::item:selected {
                background: transparent;
                border: none;
            }
            QListWidget::item:focus {
                outline: none;
            }
        """)
        
        # –í–Ü–î–ö–õ–Æ–ß–ê–Ñ–ú–û –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –í–ò–î–Ü–õ–ï–ù–ù–Ø
        self.results_list.setSelectionMode(QListWidget.NoSelection)
        
        self.results_list.itemClicked.connect(self.on_item_clicked)
        self.results_list.itemDoubleClicked.connect(self.on_item_double_clicked)
        layout.addWidget(self.results_list)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons = QHBoxLayout()
        
        self.apply_btn = QPushButton("‚úì –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —ñ–Ω–¥–µ–∫—Å")
        self.apply_btn.setEnabled(False)
        self.apply_btn.clicked.connect(self.on_apply_index)
        self.apply_btn.setStyleSheet("background-color: #4CAF50; color: white; padding: 6px; font-size: 11px;")
        buttons.addWidget(self.apply_btn)
        
        self.fix_address_btn = QPushButton("üîß –í–∏–ø—Ä–∞–≤–∏—Ç–∏ –∞–¥—Ä–µ—Å—É")
        self.fix_address_btn.setEnabled(False)
        self.fix_address_btn.clicked.connect(self.on_fix_address)
        self.fix_address_btn.setStyleSheet("background-color: #FF9800; color: white; padding: 6px; font-size: 11px;")
        buttons.addWidget(self.fix_address_btn)
        
        layout.addLayout(buttons)
        
        hint = QLabel("üí° –ö–ª—ñ–∫ –¥–ª—è –≤–∏–±–æ—Ä—É, –ø–æ–¥–≤—ñ–π–Ω–∏–π –∫–ª—ñ–∫ = –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏")
        hint.setStyleSheet("color: #666; font-size: 10px; padding: 3px;")
        layout.addWidget(hint)
        
        self.setLayout(layout)
    
    def show_results(self, results, query_building=""):
        self.results_list.clear()
        self.current_results = results
        self.query_building = query_building
        self.current_selected_row = -1
        
        self.apply_btn.setEnabled(False)
        self.fix_address_btn.setEnabled(False)
        
        self.count_label.setText(f"–ó–Ω–∞–π–¥–µ–Ω–æ: {len(results)}")
        
        if not results:
            item = QListWidgetItem("‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            item.setData(Qt.UserRole, {'no_results': True})
            self.results_list.addItem(item)
            return
        
        first_result = results[0] if results else {}
        not_working = first_result.get('not_working', '')
        
        if not_working:
            if '‚õî' in not_working or '–¢–∏–º—á–∞—Å–æ–≤–æ –Ω–µ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É—î' in not_working:
                text = f"‚õî {not_working}\n\nüí° –ü–æ–¥–≤—ñ–π–Ω–∏–π –∫–ª—ñ–∫ ‚Üí —ñ–Ω–¥–µ–∫—Å '*'"
                color = QColor(255, 224, 224, 180)
                special_index = '*'
            elif '–í–ü–ó' in not_working:
                match = re.search(r'(\d{5})', not_working)
                special_index = match.group(1) if match else '**'
                text = f"üìÆ {not_working}\n\nüí° –ü–æ–¥–≤—ñ–π–Ω–∏–π –∫–ª—ñ–∫ ‚Üí —ñ–Ω–¥–µ–∫—Å '{special_index}'"
                color = QColor(255, 243, 224, 180)
            else:
                special_index = None
            
            if special_index:
                item = QListWidgetItem(text)
                item.setBackground(color)
                font = item.font()
                font.setBold(True)
                font.setPointSize(font.pointSize() + 1)
                item.setFont(font)
                item.setData(Qt.UserRole, {'index': special_index, 'special': True})
                self.results_list.addItem(item)
                self.apply_btn.setEnabled(True)
                return
        
        has_high_confidence = any(r.get('confidence', 0) >= 95 for r in results)
        self.fix_address_btn.setEnabled(has_high_confidence)
        
        for i, result in enumerate(results, 1):
            confidence = result.get('confidence', 0)
            city = result.get('city', '')
            street = result.get('street', '')
            region = result.get('region', '')
            district = result.get('district', '')
            index = result.get('index', '')
            not_working = result.get('not_working', '')
            buildings = result.get('buildings', '')
            
            text = f"#{i} [{confidence}%]\n"
            location_parts = []
            if region:
                location_parts.append(region)
            if district:
                location_parts.append(district)
            if city:
                location_parts.append(city)
            text += ", ".join(location_parts) + f"\n{street}"
            text += f"\n   ‚Üí –Ü–Ω–¥–µ–∫—Å: {index}"
            
            if buildings:
                highlighted_buildings = self.highlight_matching_buildings(buildings, query_building)
                buildings_display = self.format_buildings_multiline(highlighted_buildings, max_per_line=12)
                text += f"\n   üè† {buildings_display}"

            if not_working:
                text += f"\n   ‚ö†Ô∏è {not_working}"

            item = QListWidgetItem(text)
            item.setData(Qt.UserRole, result)

            # –ö–û–õ–¨–û–†–û–í–ï –†–û–ó–î–Ü–õ–ï–ù–ù–Ø –ü–û –í–Ü–î–°–û–¢–ö–ê–ú
            if confidence >= 90:
                bg_color = QColor(200, 230, 201)
            elif confidence >= 80:
                bg_color = QColor(255, 249, 196)
            elif confidence >= 70:
                bg_color = QColor(255, 224, 178)
            else:
                bg_color = QColor(255, 205, 210)

            item.setBackground(bg_color)

            # –î–ò–ù–ê–ú–Ü–ß–ù–ê –í–ò–°–û–¢–ê (–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä—è–¥–∫—ñ–≤ —Ç–µ–∫—Å—Ç—É)
            line_count = text.count('\n') + 1
            item_height = max(80, line_count * 18)  # 18px –Ω–∞ —Ä—è–¥–æ–∫
            item.setSizeHint(QSize(0, item_height))

            self.results_list.addItem(item)

        
        if results:
            self.apply_btn.setEnabled(True)
            
    def format_buildings_multiline(self, buildings_str, max_per_line=15):
        """–§–æ—Ä–º–∞—Ç—É—î —Å–ø–∏—Å–æ–∫ –±—É–¥–∏–Ω–∫—ñ–≤ –∑ –ø–µ—Ä–µ–Ω–æ—Å–æ–º –Ω–∞ –Ω–æ–≤—ñ —Ä—è–¥–∫–∏"""
        buildings_list = [b.strip() for b in buildings_str.split(',')]
        
        lines = []
        current_line = []
        
        for building in buildings_list:
            current_line.append(building)
            if len(current_line) >= max_per_line:
                lines.append(", ".join(current_line))
                current_line = []
        
        if current_line:
            lines.append(", ".join(current_line))
        
        return "\n      ".join(lines)

    def clear_results(self):
        """–û—á–∏—â–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É"""
        self.results_list.clear()
        self.current_results = []
        self.query_building = ""
        self.current_selected_row = -1
        self.count_label.setText("")
        self.apply_btn.setEnabled(False)
        self.fix_address_btn.setEnabled(False)
            
    
    def highlight_matching_buildings(self, buildings_str, query_building):
        """–í–∏–¥—ñ–ª—è—î —Å–ø—ñ–≤–ø–∞–¥–∞—é—á—ñ –±—É–¥–∏–Ω–∫–∏ –∂–∏—Ä–Ω–∏–º —à—Ä–∏—Ñ—Ç–æ–º —á–µ—Ä–µ–∑ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—É —Ä–æ–∑–º—ñ—Ç–∫—É"""
        if not query_building:
            return buildings_str
        
        # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –∑–∞–ø–∏—Ç
        query_clean = query_building.strip().upper().replace(" ", "").replace("-", "").replace("–ê", "A").replace("–ë", "B")
        
        buildings_list = [b.strip() for b in buildings_str.split(',')]
        highlighted_list = []
        
        for building in buildings_list:
            building_clean = building.upper().replace(" ", "").replace("-", "").replace("–ê", "A").replace("–ë", "B")
            
            if query_clean == building_clean:
                # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —Å–ø—ñ–≤–ø–∞–¥–∞—é—á—ñ –±—É–¥–∏–Ω–∫–∏ —Å–∏–º–≤–æ–ª–æ–º ‚òÖ
                highlighted_list.append(f"‚òÖ{building}")
            else:
                highlighted_list.append(building)
        
        return ", ".join(highlighted_list)

    
    def on_item_clicked(self, item):
        """–í–∏–¥—ñ–ª—è—î –µ–ª–µ–º–µ–Ω—Ç –∂–∏—Ä–Ω–∏–º —à—Ä–∏—Ñ—Ç–æ–º"""
        data = item.data(Qt.UserRole)
        if isinstance(data, dict) and data.get('no_results'):
            return
        
        # –°–∫–∏–¥–∞—î–º–æ —à—Ä–∏—Ñ—Ç –¥–ª—è –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        for i in range(self.results_list.count()):
            list_item = self.results_list.item(i)
            font = list_item.font()
            font.setBold(False)
            list_item.setFont(font)
        
        # –†–æ–±–∏–º–æ –∂–∏—Ä–Ω–∏–º –≤–∏–±—Ä–∞–Ω–∏–π
        font = item.font()
        font.setBold(True)
        item.setFont(font)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω–¥–µ–∫—Å
        self.current_selected_row = self.results_list.row(item)
    
    def on_item_double_clicked(self, item):
        data = item.data(Qt.UserRole)
        if isinstance(data, dict):
            if data.get('no_results'):
                return
            if data.get('special'):
                self.apply_index_clicked.emit(data)
                return
        self.on_apply_index()
    
    def on_apply_index(self):
        if self.current_selected_row < 0:
            QMessageBox.warning(self, "–£–≤–∞–≥–∞", "–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑—ñ —Å–ø–∏—Å–∫—É (–∫–ª—ñ–∫–Ω—ñ—Ç—å –Ω–∞ –Ω—å–æ–≥–æ)")
            return
        
        if self.current_selected_row >= len(self.current_results):
            return
        
        result = self.current_results[self.current_selected_row]
        self.apply_index_clicked.emit(result)
    
    def on_fix_address(self):
        if self.current_selected_row < 0:
            QMessageBox.warning(self, "–£–≤–∞–≥–∞", "–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑—ñ —Å–ø–∏—Å–∫—É (–∫–ª—ñ–∫–Ω—ñ—Ç—å –Ω–∞ –Ω—å–æ–≥–æ)")
            return
        
        if self.current_selected_row >= len(self.current_results):
            return
        
        result = self.current_results[self.current_selected_row]
        self.fix_address_clicked.emit(result)

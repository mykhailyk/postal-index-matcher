"""
–ü–∞–Ω–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É
"""
from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
    QListWidget, QListWidgetItem, QSpinBox
)
from PyQt5.QtCore import pyqtSignal, Qt
from PyQt5.QtGui import QColor, QBrush
import config


class ResultsPanel(QWidget):
    """–ü–∞–Ω–µ–ª—å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É"""
    
    index_double_clicked = pyqtSignal(str)
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.current_results = []
        self.init_ui()
    
    def init_ui(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î UI"""
        layout = QVBoxLayout()
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(3)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QLabel("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É")
        header.setStyleSheet("font-weight: bold; font-size: 13px; padding: 5px;")
        layout.addWidget(header)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        controls = QHBoxLayout()
        
        label = QLabel("–ë—É–¥–∏–Ω–∫—ñ–≤ –Ω–∞ —Ä—è–¥–æ–∫:")
        label.setStyleSheet("font-size: 10px;")
        controls.addWidget(label)
        
        self.buildings_per_line_spinbox = QSpinBox()
        self.buildings_per_line_spinbox.setMinimum(5)
        self.buildings_per_line_spinbox.setMaximum(60)
        self.buildings_per_line_spinbox.setValue(12)
        self.buildings_per_line_spinbox.setStyleSheet("font-size: 10px; padding: 2px;")
        self.buildings_per_line_spinbox.valueChanged.connect(self.refresh_results)
        controls.addWidget(self.buildings_per_line_spinbox)
        
        # –î–û–î–ê–ù–û: –ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–æ–∑–º—ñ—Ä—É —à—Ä–∏—Ñ—Ç—É
        font_label = QLabel("–®—Ä–∏—Ñ—Ç:")
        font_label.setStyleSheet("font-size: 10px; margin-left: 10px;")
        controls.addWidget(font_label)
        
        self.results_font_spinbox = QSpinBox()
        self.results_font_spinbox.setMinimum(9)
        self.results_font_spinbox.setMaximum(14)
        self.results_font_spinbox.setValue(11)
        self.results_font_spinbox.setSuffix(" px")
        self.results_font_spinbox.setStyleSheet("font-size: 10px; padding: 2px;")
        self.results_font_spinbox.valueChanged.connect(self.update_font_size)
        controls.addWidget(self.results_font_spinbox)
        
        controls.addStretch()
        layout.addLayout(controls)
        
        # –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        self.results_list = QListWidget()
        self.results_list.setWordWrap(True)
        self.results_list.itemDoubleClicked.connect(self.on_result_double_clicked)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –±–∞–∑–æ–≤–∏–π stylesheet
        self.base_stylesheet = """
            QListWidget {
                border: 1px solid #ddd;
                background-color: white;
            }
            QListWidget::item {
                padding: 8px;
                border-bottom: 1px solid #eee;
            }
            QListWidget::item:selected {
                border: 2px solid #2196F3;
                background-color: rgba(33, 150, 243, 0.2);
            }
            QListWidget::item:hover {
                border: 1px solid #2196F3;
            }
        """
        self.update_font_size(11)  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä
        layout.addWidget(self.results_list)
        
        # –ü—ñ–¥–∫–∞–∑–∫–∞
        hint = QLabel("üí° –ü–æ–¥–≤—ñ–π–Ω–∏–π –∫–ª—ñ–∫ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è")
        hint.setStyleSheet("color: #666; font-size: 9px; padding: 5px;")
        layout.addWidget(hint)
        
        self.setLayout(layout)

    def update_font_size(self, size):
        """–û–Ω–æ–≤–ª—é—î —Ä–æ–∑–º—ñ—Ä —à—Ä–∏—Ñ—Ç—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"""
        stylesheet = self.base_stylesheet.replace(
            "QListWidget {",
            f"QListWidget {{\n            font-size: {size}px;"
        )
        self.results_list.setStyleSheet(stylesheet)

    
    def show_results(self, results, query_building=""):
        """
        –ü–æ–∫–∞–∑—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É
        
        Args:
            results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∑ –ø–æ–ª—è–º–∏ region, city, street, index —Ç–æ—â–æ
            query_building: –ù–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É –∑ –∑–∞–ø–∏—Ç—É –¥–ª—è –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è
        """
        self.current_results = results
        self._last_query_building = query_building
        self.results_list.clear()
        
        if not results:
            item = QListWidgetItem("‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            item.setForeground(QBrush(QColor(150, 150, 150)))
            self.results_list.addItem(item)
            return
        
        max_per_line = self.buildings_per_line_spinbox.value()
        
        for i, result in enumerate(results, 1):
            confidence = result.get('confidence', 0)
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –±—É–¥–∏–Ω–∫–∏ –∑ –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è–º
            buildings = result.get('buildings', '')
            if buildings and query_building:
                buildings_display = self.format_buildings_multiline(
                    buildings, 
                    query_building, 
                    max_per_line=max_per_line
                )
            else:
                buildings_display = self.format_buildings_multiline(
                    buildings, 
                    max_per_line=max_per_line
                )
            
            # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç
            text = f"#{i} [{confidence}%] {result['city']}, {result['street']}"
            
            if result.get('district'):
                text += f"\n   –†–∞–π–æ–Ω: {result['district']}"
            
            text += f"\n   üè† {buildings_display}"
            text += f"\n   üìÆ –Ü–Ω–¥–µ–∫—Å: {result['index']}"
            
            # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
            if result.get('not_working'):
                text += f"\n   ‚ö†Ô∏è {result['not_working']}"
            elif result.get('features'):
                text += f"\n   ‚ÑπÔ∏è {result['features']}"
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ item
            item = QListWidgetItem(text)
            item.setData(Qt.UserRole, result)
            
            # –ö–û–õ–¨–û–†–û–í–ï –†–û–ó–î–Ü–õ–ï–ù–ù–Ø - –í–ò–ü–†–ê–í–õ–ï–ù–û!
            if confidence >= 90:
                color_hex = "#C8E6C9"  # —Å–≤—ñ—Ç–ª–æ-–∑–µ–ª–µ–Ω–∏–π
            elif confidence >= 80:
                color_hex = "#FFF9C4"  # —Å–≤—ñ—Ç–ª–æ-–∂–æ–≤—Ç–∏–π
            elif confidence >= 70:
                color_hex = "#FFE0B2"  # —Å–≤—ñ—Ç–ª–æ-–ø–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π
            else:
                color_hex = "#FFCDD2"  # —Å–≤—ñ—Ç–ª–æ-—á–µ—Ä–≤–æ–Ω–∏–π
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–ª—ñ—Ä —Ñ–æ–Ω—É
            item.setBackground(QColor(color_hex))
            
            self.results_list.addItem(item)
    
    def format_buildings_multiline(self, buildings_str, highlight="", max_per_line=12):
        """
        –§–æ—Ä–º–∞—Ç—É—î –±—É–¥–∏–Ω–∫–∏ –≤ –∫—ñ–ª—å–∫–∞ —Ä—è–¥–∫—ñ–≤ –∑ –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è–º
        
        Args:
            buildings_str: –†—è–¥–æ–∫ –∑ –±—É–¥–∏–Ω–∫–∞–º–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É
            highlight: –ë—É–¥–∏–Ω–æ–∫ –¥–ª—è –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è
            max_per_line: –ú–∞–∫—Å–∏–º—É–º –±—É–¥–∏–Ω–∫—ñ–≤ –Ω–∞ —Ä—è–¥–æ–∫
        """
        if not buildings_str:
            return "‚Äî"
        
        buildings = [b.strip() for b in buildings_str.split(',')]
        
        # –ü—ñ–¥—Å–≤—ñ—á—É—î–º–æ —à—É–∫–∞–Ω–∏–π –±—É–¥–∏–Ω–æ–∫
        if highlight:
            highlight_clean = highlight.upper().replace("-", "").replace(" ", "")
            formatted = []
            for b in buildings:
                b_clean = b.upper().replace("-", "").replace(" ", "")
                if b_clean == highlight_clean:
                    formatted.append(f"‚û§{b}‚¨Ö")  # –ü—ñ–¥—Å–≤—ñ—á—É—î–º–æ —Å—Ç—Ä—ñ–ª–∫–∞–º–∏
                else:
                    formatted.append(b)
            buildings = formatted
        
        # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —Ä—è–¥–∫–∏
        lines = []
        for i in range(0, len(buildings), max_per_line):
            chunk = buildings[i:i + max_per_line]
            lines.append(", ".join(chunk))
        
        return "\n      ".join(lines)
    
    def refresh_results(self):
        """–û–Ω–æ–≤–ª—é—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        if self.current_results:
            query_building = ""
            if hasattr(self, '_last_query_building'):
                query_building = self._last_query_building
            self.show_results(self.current_results, query_building)
    
    def on_result_double_clicked(self, item):
        """–û–±—Ä–æ–±–ª—è—î –ø–æ–¥–≤—ñ–π–Ω–∏–π –∫–ª—ñ–∫ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É"""
        result = item.data(Qt.UserRole)
        if result and 'index' in result:
            self.index_double_clicked.emit(result['index'])
    
    def clear_results(self):
        """–û—á–∏—â–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏"""
        self.results_list.clear()
        self.current_results = []

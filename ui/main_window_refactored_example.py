"""
–ü—Ä–∏–∫–ª–∞–¥ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É MainWindow –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤

–¶–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Ç–æ–≥–æ, —è–∫ MainWindow –º–æ–∂–µ –≤–∏–≥–ª—è–¥–∞—Ç–∏ –ø—ñ—Å–ª—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É.
–û—Å–Ω–æ–≤–Ω–∞ —ñ–¥–µ—è: MainWindow —Å—Ç–∞—î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–º, —è–∫–∏–π –¥–µ–ª–µ–≥—É—î —Ä–æ–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º.
"""

from PyQt5.QtWidgets import (
    QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QSplitter,
    QPushButton, QLabel, QTableWidget, QProgressBar, QMessageBox
)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QColor

from ui.managers import FileManager, SearchManager, ProcessingManager, UIStateManager
from ui.styles import AppStyles
from ui.widgets.column_mapping_dialog import ColumnMappingDialog
from ui.widgets.address_selector_panel import AddressSelectorPanel
from ui.widgets.results_panel import ResultsPanel
from ui.widgets.auto_processing_dialog import AutoProcessingDialog
from utils.undo_manager import UndoManager
from utils.settings_manager import SettingsManager
import config


class MainWindowRefactored(QMainWindow):
    """
    –†–µ—Ñ–∞–∫—Ç–æ—Ä–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
    
    –ö–ª—é—á–æ–≤—ñ –∑–º—ñ–Ω–∏:
    - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –∑–∞–º—ñ—Å—Ç—å –ø—Ä—è–º–æ—ó –ª–æ–≥—ñ–∫–∏
    - –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Å—Ç–∏–ª—ñ —á–µ—Ä–µ–∑ AppStyles
    - –ß—ñ—Ç–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ
    - –ú–µ–Ω—à–µ –∫–æ–¥—É —É –≤—ñ–∫–Ω—ñ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—è –∑–∞–º—ñ—Å—Ç—å —ñ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü—ñ—ó)
    """
    
    def __init__(self):
        super().__init__()
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
        self.file_manager = FileManager()
        self.search_manager = SearchManager()
        self.undo_manager = UndoManager()
        self.processing_manager = ProcessingManager(
            self.file_manager.excel_handler,
            self.undo_manager
        )
        self.ui_state = UIStateManager()
        
        # –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
        self.current_row = -1
        self.search_results = []
        
        # –í—ñ–¥–∂–µ—Ç–∏ (–±—É–¥–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –≤ init_ui)
        self.table = None
        self.progress_bar = None
        self.status_bar = None
        self.results_panel = None
        self.address_panel = None
        
        # UI
        self._init_ui()
        self._connect_signals()
        self._setup_callbacks()
        
    def _init_ui(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è UI"""
        self.setWindowTitle(config.WINDOW_TITLE)
        
        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –≥–µ–æ–º–µ—Ç—Ä—ñ—é –≤—ñ–∫–Ω–∞
        geometry = SettingsManager.get_window_geometry()
        if geometry:
            self.setGeometry(geometry['x'], geometry['y'], geometry['width'], geometry['height'])
        else:
            self.setGeometry(100, 50, config.WINDOW_WIDTH, config.WINDOW_HEIGHT)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π –≤—ñ–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        main_layout = QVBoxLayout()
        main_layout.setSpacing(3)
        main_layout.setContentsMargins(5, 5, 5, 5)
        central_widget.setLayout(main_layout)
        
        # –ü–∞–Ω–µ–ª—ñ
        top_panel = self._create_top_panel()
        main_layout.addWidget(top_panel)
        
        main_splitter = QSplitter(Qt.Horizontal)
        
        left_panel = self._create_table_panel()
        main_splitter.addWidget(left_panel)
        
        right_panel = self._create_right_panel()
        main_splitter.addWidget(right_panel)
        
        main_splitter.setSizes([1100, 600])
        main_layout.addWidget(main_splitter)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = QLabel("–ì–æ—Ç–æ–≤–æ –¥–æ —Ä–æ–±–æ—Ç–∏")
        self.status_bar.setStyleSheet(AppStyles.status_bar())
        main_layout.addWidget(self.status_bar)
        
        # –ü—Ä–æ–≥—Ä–µ—Å –±–∞—Ä
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.progress_bar.setStyleSheet(AppStyles.progress_bar())
        main_layout.addWidget(self.progress_bar)
    
    def _create_top_panel(self):
        """–°—Ç–≤–æ—Ä—é—î –≤–µ—Ä—Ö–Ω—é –ø–∞–Ω–µ–ª—å –∑ –∫–Ω–æ–ø–∫–∞–º–∏"""
        panel = QWidget()
        layout = QHBoxLayout()
        layout.setSpacing(5)
        
        # –ú—ñ—Ç–∫–∞ —Ñ–∞–π–ª—É
        self.file_label = QLabel("–ù–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
        self.file_label.setStyleSheet(AppStyles.file_label())
        layout.addWidget(self.file_label)
        
        # –ö–Ω–æ–ø–∫–∏
        self.load_btn = QPushButton("–í—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª")
        self.load_btn.setStyleSheet(AppStyles.button_default())
        self.load_btn.clicked.connect(self.load_file)
        layout.addWidget(self.load_btn)
        
        self.column_mapping_btn = QPushButton("‚öô –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å—Ç–æ–≤–ø—Ü—ñ")
        self.column_mapping_btn.setEnabled(False)
        self.column_mapping_btn.setStyleSheet(AppStyles.button_default())
        self.column_mapping_btn.clicked.connect(self.configure_columns)
        layout.addWidget(self.column_mapping_btn)
        
        self.save_btn = QPushButton("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏")
        self.save_btn.setEnabled(False)
        self.save_btn.setStyleSheet(AppStyles.button_success())
        self.save_btn.clicked.connect(self.save_file)
        layout.addWidget(self.save_btn)
        
        self.search_btn = QPushButton("üîç –ó–Ω–∞–π—Ç–∏")
        self.search_btn.setEnabled(False)
        self.search_btn.setStyleSheet(AppStyles.button_primary())
        self.search_btn.clicked.connect(self.search_address)
        layout.addWidget(self.search_btn)
        
        self.auto_process_btn = QPushButton("‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞")
        self.auto_process_btn.setEnabled(False)
        self.auto_process_btn.setStyleSheet(AppStyles.button_warning())
        self.auto_process_btn.clicked.connect(self.start_auto_processing)
        layout.addWidget(self.auto_process_btn)
        
        layout.addStretch()
        
        panel.setLayout(layout)
        return panel
    
    def _create_table_panel(self):
        """–°—Ç–≤–æ—Ä—é—î –ø–∞–Ω–µ–ª—å –∑ —Ç–∞–±–ª–∏—Ü–µ—é"""
        panel = QWidget()
        layout = QVBoxLayout()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QLabel("üìã –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö")
        header.setStyleSheet(AppStyles.panel_header())
        layout.addWidget(header)
        
        # –¢–∞–±–ª–∏—Ü—è
        self.table = QTableWidget()
        self.table.setStyleSheet(AppStyles.table_main())
        self.table.itemSelectionChanged.connect(self.on_row_selected)
        layout.addWidget(self.table)
        
        panel.setLayout(layout)
        return panel
    
    def _create_right_panel(self):
        """–°—Ç–≤–æ—Ä—é—î –ø—Ä–∞–≤—É –ø–∞–Ω–µ–ª—å"""
        panel = QSplitter(Qt.Vertical)
        
        # –ü–∞–Ω–µ–ª—å –ø—ñ–¥–±–æ—Ä—É –∞–¥—Ä–µ—Å–∏
        self.address_panel = AddressSelectorPanel()
        self.address_panel.index_double_clicked.connect(self.apply_index)
        
        # –ü–∞–Ω–µ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        self.results_panel = ResultsPanel()
        self.results_panel.index_selected.connect(self.apply_index)
        self.results_panel.search_requested.connect(self.search_address)
        
        panel.addWidget(self.address_panel)
        panel.addWidget(self.results_panel)
        
        panel.setSizes([220, 480])
        
        return panel
    
    def _connect_signals(self):
        """–ü—ñ–¥–∫–ª—é—á–∞—î —Å–∏–≥–Ω–∞–ª–∏ –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤"""
        # –°–∏–≥–Ω–∞–ª–∏ –≤—ñ–¥ UIStateManager
        self.ui_state.file_loaded.connect(self._on_file_loaded_signal)
        self.ui_state.processing_started.connect(self._on_processing_started_signal)
        self.ui_state.processing_finished.connect(self._on_processing_finished_signal)
    
    def _setup_callbacks(self):
        """–ù–∞–ª–∞—à—Ç–æ–≤—É—î –∫–æ–ª–±–µ–∫–∏ –¥–ª—è ProcessingManager"""
        self.processing_manager.on_progress_update = self._on_progress_update
        self.processing_manager.on_row_processed = self._on_row_processed
    
    # ==================== –û–ë–†–û–ë–ù–ò–ö–ò –°–ò–ì–ù–ê–õ–Ü–í ====================
    
    def _on_file_loaded_signal(self, file_path: str):
        """–û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É"""
        self.file_label.setText(file_path.split('/')[-1])
        
        # –ê–∫—Ç–∏–≤—É—î–º–æ –∫–Ω–æ–ø–∫–∏
        buttons = {
            'column_mapping': self.column_mapping_btn,
            'save': self.save_btn,
            'search': self.search_btn,
            'auto_process': self.auto_process_btn
        }
        self.ui_state.enable_buttons_for_file_loaded(buttons)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ magistral cache
        magistral_records = self.search_manager.get_magistral_records()
        if self.address_panel:
            self.address_panel.set_magistral_cache(magistral_records)
    
    def _on_processing_started_signal(self):
        """–û–±—Ä–æ–±–∫–∞ –ø–æ—á–∞—Ç–∫—É –æ–±—Ä–æ–±–∫–∏"""
        self.progress_bar.setVisible(True)
        
        buttons = {
            'search': self.search_btn,
            'auto_process': self.auto_process_btn,
            'column_mapping': self.column_mapping_btn,
            'save': self.save_btn
        }
        self.ui_state.disable_buttons_for_processing(buttons)
    
    def _on_processing_finished_signal(self):
        """–û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏"""
        self.progress_bar.setVisible(False)
        
        buttons = {
            'search': self.search_btn,
            'auto_process': self.auto_process_btn,
            'column_mapping': self.column_mapping_btn,
            'save': self.save_btn
        }
        self.ui_state.enable_buttons_after_processing(buttons)
    
    def _on_progress_update(self, current: int, total: int):
        """–ö–æ–ª–±–µ–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É"""
        self.progress_bar.setMaximum(total)
        self.progress_bar.setValue(current)
        
        percent = int((current / total) * 100)
        self.status_bar.setText(f"‚è≥ –û–±—Ä–æ–±–∫–∞ {current}/{total} ({percent}%)...")
    
    def _on_row_processed(self, row_idx: int, index: str):
        """–ö–æ–ª–±–µ–∫ –æ–±—Ä–æ–±–∫–∏ —Ä—è–¥–∫–∞"""
        # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–º—ñ—Ä–∫—É –≤ —Ç–∞–±–ª–∏—Ü—ñ
        mapping = self.file_manager.excel_handler.column_mapping
        if mapping and 'index' in mapping:
            idx_col = mapping['index'][0]
            item = self.table.item(row_idx, idx_col)
            if item:
                item.setText(index)
                item.setForeground(QColor(AppStyles.Colors.INDEX_APPLIED))
    
    # ==================== –û–°–ù–û–í–ù–Ü –ú–ï–¢–û–î–ò ====================
    
    def load_file(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É —á–µ—Ä–µ–∑ FileManager"""
        file_path = self.file_manager.get_file_dialog_path(self, mode='open')
        if not file_path:
            return
        
        success = self.file_manager.load_file(file_path)
        if success:
            self.ui_state.set_file_loaded(file_path)
            self._display_table()
            
            # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏
            if not self.file_manager.excel_handler.column_mapping:
                reply = QMessageBox.question(
                    self,
                    "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤",
                    "–ë–∞–∂–∞—î—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ–≤ –∑–∞—Ä–∞–∑?",
                    QMessageBox.Yes | QMessageBox.No
                )
                if reply == QMessageBox.Yes:
                    self.configure_columns()
        else:
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª")
    
    def save_file(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É —á–µ—Ä–µ–∑ FileManager"""
        success = self.file_manager.save_file(
            save_old_index=False,
            parent=self
        )
        
        if success:
            self.ui_state.set_file_saved()
            self.status_bar.setText("‚úÖ –§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
            QMessageBox.information(self, "–£—Å–ø—ñ—Ö", "–§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        else:
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª")
    
    def configure_columns(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ —Å—Ç–æ–≤–ø—Ü—ñ–≤"""
        if not self.file_manager.excel_handler.df.empty:
            df_sample = self.file_manager.excel_handler.df.head(10)
            
            dialog = ColumnMappingDialog(
                self.file_manager.excel_handler.get_column_names(),
                self.file_manager.excel_handler.column_mapping or {},
                df_sample,
                self
            )
            
            if dialog.exec_():
                mapping = dialog.get_mapping()
                self.file_manager.excel_handler.set_column_mapping(mapping)
                self._display_table()
                self.file_manager.copy_to_old_index()
                
                QMessageBox.information(self, "–£—Å–ø—ñ—Ö", "–í—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    
    def search_address(self):
        """–ü–æ—à—É–∫ –∞–¥—Ä–µ—Å–∏ —á–µ—Ä–µ–∑ SearchManager"""
        if self.current_row < 0:
            QMessageBox.warning(self, "–£–≤–∞–≥–∞", "–û–±–µ—Ä—ñ—Ç—å —Ä—è–¥–æ–∫ –¥–ª—è –ø–æ—à—É–∫—É")
            return
        
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–¥—Ä–µ—Å—É –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä—è–¥–∫–∞
            address = self.file_manager.excel_handler.get_address_from_row(self.current_row)
            
            # –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—à—É–∫ —á–µ—Ä–µ–∑ SearchManager
            results = self.search_manager.search(address, max_results=20)
            
            # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            self.results_panel.show_results(results, address.building or "")
            
            if results:
                self.address_panel.populate_from_results(results)
            
            self.status_bar.setText(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(results)} –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤")
            
        except Exception as e:
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É:\n{e}")
            self.status_bar.setText("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É")
    
    def apply_index(self, index: str):
        """–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É —á–µ—Ä–µ–∑ ProcessingManager"""
        if self.current_row < 0:
            return
        
        success = self.processing_manager.apply_index(self.current_row, index)
        
        if success:
            # –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é
            mapping = self.file_manager.excel_handler.column_mapping
            if mapping and 'index' in mapping:
                idx_col = mapping['index'][0]
                item = self.table.item(self.current_row, idx_col)
                if item:
                    item.setText(index)
                    color = self.ui_state.get_index_color_for_state(is_applied=True)
                    item.setForeground(color)
            
            # –õ–æ–≥—É—î–º–æ
            address = self.file_manager.excel_handler.get_address_from_row(self.current_row)
            self.search_manager.log_index_applied(self.current_row, address, index)
            
            self.status_bar.setText(f"‚úÖ –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —ñ–Ω–¥–µ–∫—Å {index}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—è–¥–æ–∫
            if self.current_row + 1 < self.table.rowCount():
                self.table.selectRow(self.current_row + 1)
    
    def start_auto_processing(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏"""
        if self.current_row < 0:
            self.current_row = 0
        
        dialog = AutoProcessingDialog(
            self.current_row,
            len(self.file_manager.excel_handler.df),
            self
        )
        
        if dialog.exec_():
            min_confidence = dialog.get_min_confidence()
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ–±—Ä–æ–±–∫–∏
            self.ui_state.set_processing_state(True)
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É
            stats = self.processing_manager.start_auto_processing(
                start_row=self.current_row,
                total_rows=len(self.file_manager.excel_handler.df),
                min_confidence=min_confidence,
                search_func=lambda addr: self.search_manager.search(addr)
            )
            
            # –ó–∞–≤–µ—Ä—à—É—î–º–æ –æ–±—Ä–æ–±–∫—É
            self.ui_state.set_processing_state(False)
            
            self.status_bar.setText(
                f"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ: {stats['processed']}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['skipped']}"
            )
            
            QMessageBox.information(
                self,
                "–ó–∞–≤–µ—Ä—à–µ–Ω–æ",
                f"–û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–û–±—Ä–æ–±–ª–µ–Ω–æ: {stats['processed']}\n–ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['skipped']}"
            )
    
    def on_row_selected(self):
        """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ä—è–¥–∫–∞"""
        selected_rows = self.table.selectionModel().selectedRows()
        
        if not selected_rows:
            return
        
        self.current_row = selected_rows[0].row()
        self.ui_state.set_current_row(self.current_row)
        self.results_panel.clear()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫
        self.search_address()
    
    def _display_table(self):
        """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –¥–∞–Ω—ñ –≤ —Ç–∞–±–ª–∏—Ü—ñ"""
        df = self.file_manager.excel_handler.df
        
        if df is None or df.empty:
            return
        
        self.table.setRowCount(len(df))
        self.table.setColumnCount(len(df.columns))
        self.table.setHorizontalHeaderLabels(df.columns.tolist())
        
        # –ó–∞–ø–æ–≤–Ω—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é
        for i in range(len(df)):
            for j in range(len(df.columns)):
                from PyQt5.QtWidgets import QTableWidgetItem
                value = df.iloc[i, j]
                item = QTableWidgetItem(str(value) if not pd.isna(value) else "")
                self.table.setItem(i, j, item)
    
    def closeEvent(self, event):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ"""
        geometry = self.geometry()
        SettingsManager.set_window_geometry(
            geometry.x(), geometry.y(),
            geometry.width(), geometry.height()
        )
        event.accept()
